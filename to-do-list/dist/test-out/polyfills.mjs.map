{"version":3,"sources":["node_modules/zone.js/fesm2015/zone.js","node_modules/zone.js/fesm2015/zone-testing.js"],"sourcesContent":["'use strict';\n/**\n * @license Angular v<unknown>\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n((function (global) {\n    const performance = global['performance'];\n    function mark(name) {\n        performance && performance['mark'] && performance['mark'](name);\n    }\n    function performanceMeasure(name, label) {\n        performance && performance['measure'] && performance['measure'](name, label);\n    }\n    mark('Zone');\n    // Initialize before it's accessed below.\n    // __Zone_symbol_prefix global can be used to override the default zone\n    // symbol prefix with a custom one if needed.\n    const symbolPrefix = global['__Zone_symbol_prefix'] || '__zone_symbol__';\n    function __symbol__(name) {\n        return symbolPrefix + name;\n    }\n    const checkDuplicate = global[__symbol__('forceDuplicateZoneCheck')] === true;\n    if (global['Zone']) {\n        // if global['Zone'] already exists (maybe zone.js was already loaded or\n        // some other lib also registered a global object named Zone), we may need\n        // to throw an error, but sometimes user may not want this error.\n        // For example,\n        // we have two web pages, page1 includes zone.js, page2 doesn't.\n        // and the 1st time user load page1 and page2, everything work fine,\n        // but when user load page2 again, error occurs because global['Zone'] already exists.\n        // so we add a flag to let user choose whether to throw this error or not.\n        // By default, if existing Zone is from zone.js, we will not throw the error.\n        if (checkDuplicate || typeof global['Zone'].__symbol__ !== 'function') {\n            throw new Error('Zone already loaded.');\n        }\n        else {\n            return global['Zone'];\n        }\n    }\n    class Zone {\n        // tslint:disable-next-line:require-internal-with-underscore\n        static { this.__symbol__ = __symbol__; }\n        static assertZonePatched() {\n            if (global['Promise'] !== patches['ZoneAwarePromise']) {\n                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\n                    'has been overwritten.\\n' +\n                    'Most likely cause is that a Promise polyfill has been loaded ' +\n                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\n                    'If you must load one, do so before loading zone.js.)');\n            }\n        }\n        static get root() {\n            let zone = Zone.current;\n            while (zone.parent) {\n                zone = zone.parent;\n            }\n            return zone;\n        }\n        static get current() {\n            return _currentZoneFrame.zone;\n        }\n        static get currentTask() {\n            return _currentTask;\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        static __load_patch(name, fn, ignoreDuplicate = false) {\n            if (patches.hasOwnProperty(name)) {\n                // `checkDuplicate` option is defined from global variable\n                // so it works for all modules.\n                // `ignoreDuplicate` can work for the specified module\n                if (!ignoreDuplicate && checkDuplicate) {\n                    throw Error('Already loaded patch: ' + name);\n                }\n            }\n            else if (!global['__Zone_disable_' + name]) {\n                const perfName = 'Zone:' + name;\n                mark(perfName);\n                patches[name] = fn(global, Zone, _api);\n                performanceMeasure(perfName, perfName);\n            }\n        }\n        get parent() {\n            return this._parent;\n        }\n        get name() {\n            return this._name;\n        }\n        constructor(parent, zoneSpec) {\n            this._parent = parent;\n            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\n            this._properties = zoneSpec && zoneSpec.properties || {};\n            this._zoneDelegate =\n                new _ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\n        }\n        get(key) {\n            const zone = this.getZoneWith(key);\n            if (zone)\n                return zone._properties[key];\n        }\n        getZoneWith(key) {\n            let current = this;\n            while (current) {\n                if (current._properties.hasOwnProperty(key)) {\n                    return current;\n                }\n                current = current._parent;\n            }\n            return null;\n        }\n        fork(zoneSpec) {\n            if (!zoneSpec)\n                throw new Error('ZoneSpec required!');\n            return this._zoneDelegate.fork(this, zoneSpec);\n        }\n        wrap(callback, source) {\n            if (typeof callback !== 'function') {\n                throw new Error('Expecting function got: ' + callback);\n            }\n            const _callback = this._zoneDelegate.intercept(this, callback, source);\n            const zone = this;\n            return function () {\n                return zone.runGuarded(_callback, this, arguments, source);\n            };\n        }\n        run(callback, applyThis, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runGuarded(callback, applyThis = null, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                try {\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runTask(task, applyThis, applyArgs) {\n            if (task.zone != this) {\n                throw new Error('A task can only be run in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            }\n            // https://github.com/angular/zone.js/issues/778, sometimes eventTask\n            // will run in notScheduled(canceled) state, we should not try to\n            // run such kind of task but just return\n            if (task.state === notScheduled && (task.type === eventTask || task.type === macroTask)) {\n                return;\n            }\n            const reEntryGuard = task.state != running;\n            reEntryGuard && task._transitionTo(running, scheduled);\n            task.runCount++;\n            const previousTask = _currentTask;\n            _currentTask = task;\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                if (task.type == macroTask && task.data && !task.data.isPeriodic) {\n                    task.cancelFn = undefined;\n                }\n                try {\n                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                // if the task's state is notScheduled or unknown, then it has already been cancelled\n                // we should not reset the state to scheduled\n                if (task.state !== notScheduled && task.state !== unknown) {\n                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {\n                        reEntryGuard && task._transitionTo(scheduled, running);\n                    }\n                    else {\n                        task.runCount = 0;\n                        this._updateTaskCount(task, -1);\n                        reEntryGuard &&\n                            task._transitionTo(notScheduled, running, notScheduled);\n                    }\n                }\n                _currentZoneFrame = _currentZoneFrame.parent;\n                _currentTask = previousTask;\n            }\n        }\n        scheduleTask(task) {\n            if (task.zone && task.zone !== this) {\n                // check if the task was rescheduled, the newZone\n                // should not be the children of the original zone\n                let newZone = this;\n                while (newZone) {\n                    if (newZone === task.zone) {\n                        throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${task.zone.name}`);\n                    }\n                    newZone = newZone.parent;\n                }\n            }\n            task._transitionTo(scheduling, notScheduled);\n            const zoneDelegates = [];\n            task._zoneDelegates = zoneDelegates;\n            task._zone = this;\n            try {\n                task = this._zoneDelegate.scheduleTask(this, task);\n            }\n            catch (err) {\n                // should set task's state to unknown when scheduleTask throw error\n                // because the err may from reschedule, so the fromState maybe notScheduled\n                task._transitionTo(unknown, scheduling, notScheduled);\n                // TODO: @JiaLiPassion, should we check the result from handleError?\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            if (task._zoneDelegates === zoneDelegates) {\n                // we have to check because internally the delegate can reschedule the task.\n                this._updateTaskCount(task, 1);\n            }\n            if (task.state == scheduling) {\n                task._transitionTo(scheduled, scheduling);\n            }\n            return task;\n        }\n        scheduleMicroTask(source, callback, data, customSchedule) {\n            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, undefined));\n        }\n        scheduleMacroTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));\n        }\n        scheduleEventTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));\n        }\n        cancelTask(task) {\n            if (task.zone != this)\n                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            if (task.state !== scheduled && task.state !== running) {\n                return;\n            }\n            task._transitionTo(canceling, scheduled, running);\n            try {\n                this._zoneDelegate.cancelTask(this, task);\n            }\n            catch (err) {\n                // if error occurs when cancelTask, transit the state to unknown\n                task._transitionTo(unknown, canceling);\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            this._updateTaskCount(task, -1);\n            task._transitionTo(notScheduled, canceling);\n            task.runCount = 0;\n            return task;\n        }\n        _updateTaskCount(task, count) {\n            const zoneDelegates = task._zoneDelegates;\n            if (count == -1) {\n                task._zoneDelegates = null;\n            }\n            for (let i = 0; i < zoneDelegates.length; i++) {\n                zoneDelegates[i]._updateTaskCount(task.type, count);\n            }\n        }\n    }\n    const DELEGATE_ZS = {\n        name: '',\n        onHasTask: (delegate, _, target, hasTaskState) => delegate.hasTask(target, hasTaskState),\n        onScheduleTask: (delegate, _, target, task) => delegate.scheduleTask(target, task),\n        onInvokeTask: (delegate, _, target, task, applyThis, applyArgs) => delegate.invokeTask(target, task, applyThis, applyArgs),\n        onCancelTask: (delegate, _, target, task) => delegate.cancelTask(target, task)\n    };\n    class _ZoneDelegate {\n        constructor(zone, parentDelegate, zoneSpec) {\n            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };\n            this.zone = zone;\n            this._parentDelegate = parentDelegate;\n            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\n            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\n            this._forkCurrZone =\n                zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate._forkCurrZone);\n            this._interceptZS =\n                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\n            this._interceptDlgt =\n                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\n            this._interceptCurrZone =\n                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate._interceptCurrZone);\n            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\n            this._invokeDlgt =\n                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\n            this._invokeCurrZone =\n                zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate._invokeCurrZone);\n            this._handleErrorZS =\n                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\n            this._handleErrorDlgt =\n                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\n            this._handleErrorCurrZone =\n                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate._handleErrorCurrZone);\n            this._scheduleTaskZS =\n                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\n            this._scheduleTaskDlgt = zoneSpec &&\n                (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\n            this._scheduleTaskCurrZone =\n                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate._scheduleTaskCurrZone);\n            this._invokeTaskZS =\n                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\n            this._invokeTaskDlgt =\n                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\n            this._invokeTaskCurrZone =\n                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate._invokeTaskCurrZone);\n            this._cancelTaskZS =\n                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\n            this._cancelTaskDlgt =\n                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\n            this._cancelTaskCurrZone =\n                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate._cancelTaskCurrZone);\n            this._hasTaskZS = null;\n            this._hasTaskDlgt = null;\n            this._hasTaskDlgtOwner = null;\n            this._hasTaskCurrZone = null;\n            const zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;\n            const parentHasTask = parentDelegate && parentDelegate._hasTaskZS;\n            if (zoneSpecHasTask || parentHasTask) {\n                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such\n                // a case all task related interceptors must go through this ZD. We can't short circuit it.\n                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;\n                this._hasTaskDlgt = parentDelegate;\n                this._hasTaskDlgtOwner = this;\n                this._hasTaskCurrZone = zone;\n                if (!zoneSpec.onScheduleTask) {\n                    this._scheduleTaskZS = DELEGATE_ZS;\n                    this._scheduleTaskDlgt = parentDelegate;\n                    this._scheduleTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onInvokeTask) {\n                    this._invokeTaskZS = DELEGATE_ZS;\n                    this._invokeTaskDlgt = parentDelegate;\n                    this._invokeTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onCancelTask) {\n                    this._cancelTaskZS = DELEGATE_ZS;\n                    this._cancelTaskDlgt = parentDelegate;\n                    this._cancelTaskCurrZone = this.zone;\n                }\n            }\n        }\n        fork(targetZone, zoneSpec) {\n            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :\n                new Zone(targetZone, zoneSpec);\n        }\n        intercept(targetZone, callback, source) {\n            return this._interceptZS ?\n                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :\n                callback;\n        }\n        invoke(targetZone, callback, applyThis, applyArgs, source) {\n            return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :\n                callback.apply(applyThis, applyArgs);\n        }\n        handleError(targetZone, error) {\n            return this._handleErrorZS ?\n                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :\n                true;\n        }\n        scheduleTask(targetZone, task) {\n            let returnTask = task;\n            if (this._scheduleTaskZS) {\n                if (this._hasTaskZS) {\n                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);\n                }\n                // clang-format off\n                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\n                // clang-format on\n                if (!returnTask)\n                    returnTask = task;\n            }\n            else {\n                if (task.scheduleFn) {\n                    task.scheduleFn(task);\n                }\n                else if (task.type == microTask) {\n                    scheduleMicroTask(task);\n                }\n                else {\n                    throw new Error('Task is missing scheduleFn.');\n                }\n            }\n            return returnTask;\n        }\n        invokeTask(targetZone, task, applyThis, applyArgs) {\n            return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :\n                task.callback.apply(applyThis, applyArgs);\n        }\n        cancelTask(targetZone, task) {\n            let value;\n            if (this._cancelTaskZS) {\n                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\n            }\n            else {\n                if (!task.cancelFn) {\n                    throw Error('Task is not cancelable');\n                }\n                value = task.cancelFn(task);\n            }\n            return value;\n        }\n        hasTask(targetZone, isEmpty) {\n            // hasTask should not throw error so other ZoneDelegate\n            // can still trigger hasTask callback\n            try {\n                this._hasTaskZS &&\n                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\n            }\n            catch (err) {\n                this.handleError(targetZone, err);\n            }\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        _updateTaskCount(type, count) {\n            const counts = this._taskCounts;\n            const prev = counts[type];\n            const next = counts[type] = prev + count;\n            if (next < 0) {\n                throw new Error('More tasks executed then were scheduled.');\n            }\n            if (prev == 0 || next == 0) {\n                const isEmpty = {\n                    microTask: counts['microTask'] > 0,\n                    macroTask: counts['macroTask'] > 0,\n                    eventTask: counts['eventTask'] > 0,\n                    change: type\n                };\n                this.hasTask(this.zone, isEmpty);\n            }\n        }\n    }\n    class ZoneTask {\n        constructor(type, source, callback, options, scheduleFn, cancelFn) {\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._zone = null;\n            this.runCount = 0;\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._zoneDelegates = null;\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._state = 'notScheduled';\n            this.type = type;\n            this.source = source;\n            this.data = options;\n            this.scheduleFn = scheduleFn;\n            this.cancelFn = cancelFn;\n            if (!callback) {\n                throw new Error('callback is not defined');\n            }\n            this.callback = callback;\n            const self = this;\n            // TODO: @JiaLiPassion options should have interface\n            if (type === eventTask && options && options.useG) {\n                this.invoke = ZoneTask.invokeTask;\n            }\n            else {\n                this.invoke = function () {\n                    return ZoneTask.invokeTask.call(global, self, this, arguments);\n                };\n            }\n        }\n        static invokeTask(task, target, args) {\n            if (!task) {\n                task = this;\n            }\n            _numberOfNestedTaskFrames++;\n            try {\n                task.runCount++;\n                return task.zone.runTask(task, target, args);\n            }\n            finally {\n                if (_numberOfNestedTaskFrames == 1) {\n                    drainMicroTaskQueue();\n                }\n                _numberOfNestedTaskFrames--;\n            }\n        }\n        get zone() {\n            return this._zone;\n        }\n        get state() {\n            return this._state;\n        }\n        cancelScheduleRequest() {\n            this._transitionTo(notScheduled, scheduling);\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        _transitionTo(toState, fromState1, fromState2) {\n            if (this._state === fromState1 || this._state === fromState2) {\n                this._state = toState;\n                if (toState == notScheduled) {\n                    this._zoneDelegates = null;\n                }\n            }\n            else {\n                throw new Error(`${this.type} '${this.source}': can not transition to '${toState}', expecting state '${fromState1}'${fromState2 ? ' or \\'' + fromState2 + '\\'' : ''}, was '${this._state}'.`);\n            }\n        }\n        toString() {\n            if (this.data && typeof this.data.handleId !== 'undefined') {\n                return this.data.handleId.toString();\n            }\n            else {\n                return Object.prototype.toString.call(this);\n            }\n        }\n        // add toJSON method to prevent cyclic error when\n        // call JSON.stringify(zoneTask)\n        toJSON() {\n            return {\n                type: this.type,\n                state: this.state,\n                source: this.source,\n                zone: this.zone.name,\n                runCount: this.runCount\n            };\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  MICROTASK QUEUE\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const symbolSetTimeout = __symbol__('setTimeout');\n    const symbolPromise = __symbol__('Promise');\n    const symbolThen = __symbol__('then');\n    let _microTaskQueue = [];\n    let _isDrainingMicrotaskQueue = false;\n    let nativeMicroTaskQueuePromise;\n    function nativeScheduleMicroTask(func) {\n        if (!nativeMicroTaskQueuePromise) {\n            if (global[symbolPromise]) {\n                nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);\n            }\n        }\n        if (nativeMicroTaskQueuePromise) {\n            let nativeThen = nativeMicroTaskQueuePromise[symbolThen];\n            if (!nativeThen) {\n                // native Promise is not patchable, we need to use `then` directly\n                // issue 1078\n                nativeThen = nativeMicroTaskQueuePromise['then'];\n            }\n            nativeThen.call(nativeMicroTaskQueuePromise, func);\n        }\n        else {\n            global[symbolSetTimeout](func, 0);\n        }\n    }\n    function scheduleMicroTask(task) {\n        // if we are not running in any task, and there has not been anything scheduled\n        // we must bootstrap the initial task creation by manually scheduling the drain\n        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\n            // We are not running in Task, so we need to kickstart the microtask queue.\n            nativeScheduleMicroTask(drainMicroTaskQueue);\n        }\n        task && _microTaskQueue.push(task);\n    }\n    function drainMicroTaskQueue() {\n        if (!_isDrainingMicrotaskQueue) {\n            _isDrainingMicrotaskQueue = true;\n            while (_microTaskQueue.length) {\n                const queue = _microTaskQueue;\n                _microTaskQueue = [];\n                for (let i = 0; i < queue.length; i++) {\n                    const task = queue[i];\n                    try {\n                        task.zone.runTask(task, null, null);\n                    }\n                    catch (error) {\n                        _api.onUnhandledError(error);\n                    }\n                }\n            }\n            _api.microtaskDrainDone();\n            _isDrainingMicrotaskQueue = false;\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  BOOTSTRAP\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const NO_ZONE = { name: 'NO ZONE' };\n    const notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';\n    const microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';\n    const patches = {};\n    const _api = {\n        symbol: __symbol__,\n        currentZoneFrame: () => _currentZoneFrame,\n        onUnhandledError: noop,\n        microtaskDrainDone: noop,\n        scheduleMicroTask: scheduleMicroTask,\n        showUncaughtError: () => !Zone[__symbol__('ignoreConsoleErrorUncaughtError')],\n        patchEventTarget: () => [],\n        patchOnProperties: noop,\n        patchMethod: () => noop,\n        bindArguments: () => [],\n        patchThen: () => noop,\n        patchMacroTask: () => noop,\n        patchEventPrototype: () => noop,\n        isIEOrEdge: () => false,\n        getGlobalObjects: () => undefined,\n        ObjectDefineProperty: () => noop,\n        ObjectGetOwnPropertyDescriptor: () => undefined,\n        ObjectCreate: () => undefined,\n        ArraySlice: () => [],\n        patchClass: () => noop,\n        wrapWithCurrentZone: () => noop,\n        filterProperties: () => [],\n        attachOriginToPatched: () => noop,\n        _redefineProperty: () => noop,\n        patchCallbacks: () => noop,\n        nativeScheduleMicroTask: nativeScheduleMicroTask\n    };\n    let _currentZoneFrame = { parent: null, zone: new Zone(null, null) };\n    let _currentTask = null;\n    let _numberOfNestedTaskFrames = 0;\n    function noop() { }\n    performanceMeasure('Zone', 'Zone');\n    return global['Zone'] = Zone;\n}))(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\n\n/**\n * Suppress closure compiler errors about unknown 'Zone' variable\n * @fileoverview\n * @suppress {undefinedVars,globalThis,missingRequire}\n */\n/// <reference types=\"node\"/>\n// issue #989, to reduce bundle size, use short name\n/** Object.getOwnPropertyDescriptor */\nconst ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n/** Object.defineProperty */\nconst ObjectDefineProperty = Object.defineProperty;\n/** Object.getPrototypeOf */\nconst ObjectGetPrototypeOf = Object.getPrototypeOf;\n/** Object.create */\nconst ObjectCreate = Object.create;\n/** Array.prototype.slice */\nconst ArraySlice = Array.prototype.slice;\n/** addEventListener string const */\nconst ADD_EVENT_LISTENER_STR = 'addEventListener';\n/** removeEventListener string const */\nconst REMOVE_EVENT_LISTENER_STR = 'removeEventListener';\n/** zoneSymbol addEventListener */\nconst ZONE_SYMBOL_ADD_EVENT_LISTENER = Zone.__symbol__(ADD_EVENT_LISTENER_STR);\n/** zoneSymbol removeEventListener */\nconst ZONE_SYMBOL_REMOVE_EVENT_LISTENER = Zone.__symbol__(REMOVE_EVENT_LISTENER_STR);\n/** true string const */\nconst TRUE_STR = 'true';\n/** false string const */\nconst FALSE_STR = 'false';\n/** Zone symbol prefix string const. */\nconst ZONE_SYMBOL_PREFIX = Zone.__symbol__('');\nfunction wrapWithCurrentZone(callback, source) {\n    return Zone.current.wrap(callback, source);\n}\nfunction scheduleMacroTaskWithCurrentZone(source, callback, data, customSchedule, customCancel) {\n    return Zone.current.scheduleMacroTask(source, callback, data, customSchedule, customCancel);\n}\nconst zoneSymbol = Zone.__symbol__;\nconst isWindowExists = typeof window !== 'undefined';\nconst internalWindow = isWindowExists ? window : undefined;\nconst _global = isWindowExists && internalWindow || typeof self === 'object' && self || global;\nconst REMOVE_ATTRIBUTE = 'removeAttribute';\nfunction bindArguments(args, source) {\n    for (let i = args.length - 1; i >= 0; i--) {\n        if (typeof args[i] === 'function') {\n            args[i] = wrapWithCurrentZone(args[i], source + '_' + i);\n        }\n    }\n    return args;\n}\nfunction patchPrototype(prototype, fnNames) {\n    const source = prototype.constructor['name'];\n    for (let i = 0; i < fnNames.length; i++) {\n        const name = fnNames[i];\n        const delegate = prototype[name];\n        if (delegate) {\n            const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, name);\n            if (!isPropertyWritable(prototypeDesc)) {\n                continue;\n            }\n            prototype[name] = ((delegate) => {\n                const patched = function () {\n                    return delegate.apply(this, bindArguments(arguments, source + '.' + name));\n                };\n                attachOriginToPatched(patched, delegate);\n                return patched;\n            })(delegate);\n        }\n    }\n}\nfunction isPropertyWritable(propertyDesc) {\n    if (!propertyDesc) {\n        return true;\n    }\n    if (propertyDesc.writable === false) {\n        return false;\n    }\n    return !(typeof propertyDesc.get === 'function' && typeof propertyDesc.set === 'undefined');\n}\nconst isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isNode = (!('nw' in _global) && typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]');\nconst isBrowser = !isNode && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']);\n// we are in electron of nw, so we are both browser and nodejs\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isMix = typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]' && !isWebWorker &&\n    !!(isWindowExists && internalWindow['HTMLElement']);\nconst zoneSymbolEventNames$1 = {};\nconst wrapFn = function (event) {\n    // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n    // event will be undefined, so we need to use window.event\n    event = event || _global.event;\n    if (!event) {\n        return;\n    }\n    let eventNameSymbol = zoneSymbolEventNames$1[event.type];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames$1[event.type] = zoneSymbol('ON_PROPERTY' + event.type);\n    }\n    const target = this || event.target || _global;\n    const listener = target[eventNameSymbol];\n    let result;\n    if (isBrowser && target === internalWindow && event.type === 'error') {\n        // window.onerror have different signature\n        // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror\n        // and onerror callback will prevent default when callback return true\n        const errorEvent = event;\n        result = listener &&\n            listener.call(this, errorEvent.message, errorEvent.filename, errorEvent.lineno, errorEvent.colno, errorEvent.error);\n        if (result === true) {\n            event.preventDefault();\n        }\n    }\n    else {\n        result = listener && listener.apply(this, arguments);\n        if (result != undefined && !result) {\n            event.preventDefault();\n        }\n    }\n    return result;\n};\nfunction patchProperty(obj, prop, prototype) {\n    let desc = ObjectGetOwnPropertyDescriptor(obj, prop);\n    if (!desc && prototype) {\n        // when patch window object, use prototype to check prop exist or not\n        const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, prop);\n        if (prototypeDesc) {\n            desc = { enumerable: true, configurable: true };\n        }\n    }\n    // if the descriptor not exists or is not configurable\n    // just return\n    if (!desc || !desc.configurable) {\n        return;\n    }\n    const onPropPatchedSymbol = zoneSymbol('on' + prop + 'patched');\n    if (obj.hasOwnProperty(onPropPatchedSymbol) && obj[onPropPatchedSymbol]) {\n        return;\n    }\n    // A property descriptor cannot have getter/setter and be writable\n    // deleting the writable and value properties avoids this error:\n    //\n    // TypeError: property descriptors must not specify a value or be writable when a\n    // getter or setter has been specified\n    delete desc.writable;\n    delete desc.value;\n    const originalDescGet = desc.get;\n    const originalDescSet = desc.set;\n    // slice(2) cuz 'onclick' -> 'click', etc\n    const eventName = prop.slice(2);\n    let eventNameSymbol = zoneSymbolEventNames$1[eventName];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames$1[eventName] = zoneSymbol('ON_PROPERTY' + eventName);\n    }\n    desc.set = function (newValue) {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return;\n        }\n        const previousValue = target[eventNameSymbol];\n        if (typeof previousValue === 'function') {\n            target.removeEventListener(eventName, wrapFn);\n        }\n        // issue #978, when onload handler was added before loading zone.js\n        // we should remove it with originalDescSet\n        originalDescSet && originalDescSet.call(target, null);\n        target[eventNameSymbol] = newValue;\n        if (typeof newValue === 'function') {\n            target.addEventListener(eventName, wrapFn, false);\n        }\n    };\n    // The getter would return undefined for unassigned properties but the default value of an\n    // unassigned property is null\n    desc.get = function () {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return null;\n        }\n        const listener = target[eventNameSymbol];\n        if (listener) {\n            return listener;\n        }\n        else if (originalDescGet) {\n            // result will be null when use inline event attribute,\n            // such as <button onclick=\"func();\">OK</button>\n            // because the onclick function is internal raw uncompiled handler\n            // the onclick will be evaluated when first time event was triggered or\n            // the property is accessed, https://github.com/angular/zone.js/issues/525\n            // so we should use original native get to retrieve the handler\n            let value = originalDescGet.call(this);\n            if (value) {\n                desc.set.call(this, value);\n                if (typeof target[REMOVE_ATTRIBUTE] === 'function') {\n                    target.removeAttribute(prop);\n                }\n                return value;\n            }\n        }\n        return null;\n    };\n    ObjectDefineProperty(obj, prop, desc);\n    obj[onPropPatchedSymbol] = true;\n}\nfunction patchOnProperties(obj, properties, prototype) {\n    if (properties) {\n        for (let i = 0; i < properties.length; i++) {\n            patchProperty(obj, 'on' + properties[i], prototype);\n        }\n    }\n    else {\n        const onProperties = [];\n        for (const prop in obj) {\n            if (prop.slice(0, 2) == 'on') {\n                onProperties.push(prop);\n            }\n        }\n        for (let j = 0; j < onProperties.length; j++) {\n            patchProperty(obj, onProperties[j], prototype);\n        }\n    }\n}\nconst originalInstanceKey = zoneSymbol('originalInstance');\n// wrap some native API on `window`\nfunction patchClass(className) {\n    const OriginalClass = _global[className];\n    if (!OriginalClass)\n        return;\n    // keep original class in global\n    _global[zoneSymbol(className)] = OriginalClass;\n    _global[className] = function () {\n        const a = bindArguments(arguments, className);\n        switch (a.length) {\n            case 0:\n                this[originalInstanceKey] = new OriginalClass();\n                break;\n            case 1:\n                this[originalInstanceKey] = new OriginalClass(a[0]);\n                break;\n            case 2:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\n                break;\n            case 3:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\n                break;\n            case 4:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\n                break;\n            default:\n                throw new Error('Arg list too long.');\n        }\n    };\n    // attach original delegate to patched function\n    attachOriginToPatched(_global[className], OriginalClass);\n    const instance = new OriginalClass(function () { });\n    let prop;\n    for (prop in instance) {\n        // https://bugs.webkit.org/show_bug.cgi?id=44721\n        if (className === 'XMLHttpRequest' && prop === 'responseBlob')\n            continue;\n        (function (prop) {\n            if (typeof instance[prop] === 'function') {\n                _global[className].prototype[prop] = function () {\n                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\n                };\n            }\n            else {\n                ObjectDefineProperty(_global[className].prototype, prop, {\n                    set: function (fn) {\n                        if (typeof fn === 'function') {\n                            this[originalInstanceKey][prop] = wrapWithCurrentZone(fn, className + '.' + prop);\n                            // keep callback in wrapped function so we can\n                            // use it in Function.prototype.toString to return\n                            // the native one.\n                            attachOriginToPatched(this[originalInstanceKey][prop], fn);\n                        }\n                        else {\n                            this[originalInstanceKey][prop] = fn;\n                        }\n                    },\n                    get: function () {\n                        return this[originalInstanceKey][prop];\n                    }\n                });\n            }\n        }(prop));\n    }\n    for (prop in OriginalClass) {\n        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\n            _global[className][prop] = OriginalClass[prop];\n        }\n    }\n}\nfunction patchMethod(target, name, patchFn) {\n    let proto = target;\n    while (proto && !proto.hasOwnProperty(name)) {\n        proto = ObjectGetPrototypeOf(proto);\n    }\n    if (!proto && target[name]) {\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n        proto = target;\n    }\n    const delegateName = zoneSymbol(name);\n    let delegate = null;\n    if (proto && (!(delegate = proto[delegateName]) || !proto.hasOwnProperty(delegateName))) {\n        delegate = proto[delegateName] = proto[name];\n        // check whether proto[name] is writable\n        // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob\n        const desc = proto && ObjectGetOwnPropertyDescriptor(proto, name);\n        if (isPropertyWritable(desc)) {\n            const patchDelegate = patchFn(delegate, delegateName, name);\n            proto[name] = function () {\n                return patchDelegate(this, arguments);\n            };\n            attachOriginToPatched(proto[name], delegate);\n        }\n    }\n    return delegate;\n}\n// TODO: @JiaLiPassion, support cancel task later if necessary\nfunction patchMacroTask(obj, funcName, metaCreator) {\n    let setNative = null;\n    function scheduleTask(task) {\n        const data = task.data;\n        data.args[data.cbIdx] = function () {\n            task.invoke.apply(this, arguments);\n        };\n        setNative.apply(data.target, data.args);\n        return task;\n    }\n    setNative = patchMethod(obj, funcName, (delegate) => function (self, args) {\n        const meta = metaCreator(self, args);\n        if (meta.cbIdx >= 0 && typeof args[meta.cbIdx] === 'function') {\n            return scheduleMacroTaskWithCurrentZone(meta.name, args[meta.cbIdx], meta, scheduleTask);\n        }\n        else {\n            // cause an error by calling it directly.\n            return delegate.apply(self, args);\n        }\n    });\n}\nfunction attachOriginToPatched(patched, original) {\n    patched[zoneSymbol('OriginalDelegate')] = original;\n}\nlet isDetectedIEOrEdge = false;\nlet ieOrEdge = false;\nfunction isIE() {\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1) {\n            return true;\n        }\n    }\n    catch (error) {\n    }\n    return false;\n}\nfunction isIEOrEdge() {\n    if (isDetectedIEOrEdge) {\n        return ieOrEdge;\n    }\n    isDetectedIEOrEdge = true;\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {\n            ieOrEdge = true;\n        }\n    }\n    catch (error) {\n    }\n    return ieOrEdge;\n}\n\nZone.__load_patch('ZoneAwarePromise', (global, Zone, api) => {\n    const ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n    const ObjectDefineProperty = Object.defineProperty;\n    function readableObjectToString(obj) {\n        if (obj && obj.toString === Object.prototype.toString) {\n            const className = obj.constructor && obj.constructor.name;\n            return (className ? className : '') + ': ' + JSON.stringify(obj);\n        }\n        return obj ? obj.toString() : Object.prototype.toString.call(obj);\n    }\n    const __symbol__ = api.symbol;\n    const _uncaughtPromiseErrors = [];\n    const isDisableWrappingUncaughtPromiseRejection = global[__symbol__('DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION')] === true;\n    const symbolPromise = __symbol__('Promise');\n    const symbolThen = __symbol__('then');\n    const creationTrace = '__creationTrace__';\n    api.onUnhandledError = (e) => {\n        if (api.showUncaughtError()) {\n            const rejection = e && e.rejection;\n            if (rejection) {\n                console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\n            }\n            else {\n                console.error(e);\n            }\n        }\n    };\n    api.microtaskDrainDone = () => {\n        while (_uncaughtPromiseErrors.length) {\n            const uncaughtPromiseError = _uncaughtPromiseErrors.shift();\n            try {\n                uncaughtPromiseError.zone.runGuarded(() => {\n                    if (uncaughtPromiseError.throwOriginal) {\n                        throw uncaughtPromiseError.rejection;\n                    }\n                    throw uncaughtPromiseError;\n                });\n            }\n            catch (error) {\n                handleUnhandledRejection(error);\n            }\n        }\n    };\n    const UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');\n    function handleUnhandledRejection(e) {\n        api.onUnhandledError(e);\n        try {\n            const handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];\n            if (typeof handler === 'function') {\n                handler.call(this, e);\n            }\n        }\n        catch (err) {\n        }\n    }\n    function isThenable(value) {\n        return value && value.then;\n    }\n    function forwardResolution(value) {\n        return value;\n    }\n    function forwardRejection(rejection) {\n        return ZoneAwarePromise.reject(rejection);\n    }\n    const symbolState = __symbol__('state');\n    const symbolValue = __symbol__('value');\n    const symbolFinally = __symbol__('finally');\n    const symbolParentPromiseValue = __symbol__('parentPromiseValue');\n    const symbolParentPromiseState = __symbol__('parentPromiseState');\n    const source = 'Promise.then';\n    const UNRESOLVED = null;\n    const RESOLVED = true;\n    const REJECTED = false;\n    const REJECTED_NO_CATCH = 0;\n    function makeResolver(promise, state) {\n        return (v) => {\n            try {\n                resolvePromise(promise, state, v);\n            }\n            catch (err) {\n                resolvePromise(promise, false, err);\n            }\n            // Do not return value or you will break the Promise spec.\n        };\n    }\n    const once = function () {\n        let wasCalled = false;\n        return function wrapper(wrappedFunction) {\n            return function () {\n                if (wasCalled) {\n                    return;\n                }\n                wasCalled = true;\n                wrappedFunction.apply(null, arguments);\n            };\n        };\n    };\n    const TYPE_ERROR = 'Promise resolved with itself';\n    const CURRENT_TASK_TRACE_SYMBOL = __symbol__('currentTaskTrace');\n    // Promise Resolution\n    function resolvePromise(promise, state, value) {\n        const onceWrapper = once();\n        if (promise === value) {\n            throw new TypeError(TYPE_ERROR);\n        }\n        if (promise[symbolState] === UNRESOLVED) {\n            // should only get value.then once based on promise spec.\n            let then = null;\n            try {\n                if (typeof value === 'object' || typeof value === 'function') {\n                    then = value && value.then;\n                }\n            }\n            catch (err) {\n                onceWrapper(() => {\n                    resolvePromise(promise, false, err);\n                })();\n                return promise;\n            }\n            // if (value instanceof ZoneAwarePromise) {\n            if (state !== REJECTED && value instanceof ZoneAwarePromise &&\n                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&\n                value[symbolState] !== UNRESOLVED) {\n                clearRejectedNoCatch(value);\n                resolvePromise(promise, value[symbolState], value[symbolValue]);\n            }\n            else if (state !== REJECTED && typeof then === 'function') {\n                try {\n                    then.call(value, onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)));\n                }\n                catch (err) {\n                    onceWrapper(() => {\n                        resolvePromise(promise, false, err);\n                    })();\n                }\n            }\n            else {\n                promise[symbolState] = state;\n                const queue = promise[symbolValue];\n                promise[symbolValue] = value;\n                if (promise[symbolFinally] === symbolFinally) {\n                    // the promise is generated by Promise.prototype.finally\n                    if (state === RESOLVED) {\n                        // the state is resolved, should ignore the value\n                        // and use parent promise value\n                        promise[symbolState] = promise[symbolParentPromiseState];\n                        promise[symbolValue] = promise[symbolParentPromiseValue];\n                    }\n                }\n                // record task information in value when error occurs, so we can\n                // do some additional work such as render longStackTrace\n                if (state === REJECTED && value instanceof Error) {\n                    // check if longStackTraceZone is here\n                    const trace = Zone.currentTask && Zone.currentTask.data &&\n                        Zone.currentTask.data[creationTrace];\n                    if (trace) {\n                        // only keep the long stack trace into error when in longStackTraceZone\n                        ObjectDefineProperty(value, CURRENT_TASK_TRACE_SYMBOL, { configurable: true, enumerable: false, writable: true, value: trace });\n                    }\n                }\n                for (let i = 0; i < queue.length;) {\n                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\n                }\n                if (queue.length == 0 && state == REJECTED) {\n                    promise[symbolState] = REJECTED_NO_CATCH;\n                    let uncaughtPromiseError = value;\n                    try {\n                        // Here we throws a new Error to print more readable error log\n                        // and if the value is not an error, zone.js builds an `Error`\n                        // Object here to attach the stack information.\n                        throw new Error('Uncaught (in promise): ' + readableObjectToString(value) +\n                            (value && value.stack ? '\\n' + value.stack : ''));\n                    }\n                    catch (err) {\n                        uncaughtPromiseError = err;\n                    }\n                    if (isDisableWrappingUncaughtPromiseRejection) {\n                        // If disable wrapping uncaught promise reject\n                        // use the value instead of wrapping it.\n                        uncaughtPromiseError.throwOriginal = true;\n                    }\n                    uncaughtPromiseError.rejection = value;\n                    uncaughtPromiseError.promise = promise;\n                    uncaughtPromiseError.zone = Zone.current;\n                    uncaughtPromiseError.task = Zone.currentTask;\n                    _uncaughtPromiseErrors.push(uncaughtPromiseError);\n                    api.scheduleMicroTask(); // to make sure that it is running\n                }\n            }\n        }\n        // Resolving an already resolved promise is a noop.\n        return promise;\n    }\n    const REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');\n    function clearRejectedNoCatch(promise) {\n        if (promise[symbolState] === REJECTED_NO_CATCH) {\n            // if the promise is rejected no catch status\n            // and queue.length > 0, means there is a error handler\n            // here to handle the rejected promise, we should trigger\n            // windows.rejectionhandled eventHandler or nodejs rejectionHandled\n            // eventHandler\n            try {\n                const handler = Zone[REJECTION_HANDLED_HANDLER];\n                if (handler && typeof handler === 'function') {\n                    handler.call(this, { rejection: promise[symbolValue], promise: promise });\n                }\n            }\n            catch (err) {\n            }\n            promise[symbolState] = REJECTED;\n            for (let i = 0; i < _uncaughtPromiseErrors.length; i++) {\n                if (promise === _uncaughtPromiseErrors[i].promise) {\n                    _uncaughtPromiseErrors.splice(i, 1);\n                }\n            }\n        }\n    }\n    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\n        clearRejectedNoCatch(promise);\n        const promiseState = promise[symbolState];\n        const delegate = promiseState ?\n            (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :\n            (typeof onRejected === 'function') ? onRejected :\n                forwardRejection;\n        zone.scheduleMicroTask(source, () => {\n            try {\n                const parentPromiseValue = promise[symbolValue];\n                const isFinallyPromise = !!chainPromise && symbolFinally === chainPromise[symbolFinally];\n                if (isFinallyPromise) {\n                    // if the promise is generated from finally call, keep parent promise's state and value\n                    chainPromise[symbolParentPromiseValue] = parentPromiseValue;\n                    chainPromise[symbolParentPromiseState] = promiseState;\n                }\n                // should not pass value to finally callback\n                const value = zone.run(delegate, undefined, isFinallyPromise && delegate !== forwardRejection && delegate !== forwardResolution ?\n                    [] :\n                    [parentPromiseValue]);\n                resolvePromise(chainPromise, true, value);\n            }\n            catch (error) {\n                // if error occurs, should always return this error\n                resolvePromise(chainPromise, false, error);\n            }\n        }, chainPromise);\n    }\n    const ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';\n    const noop = function () { };\n    const AggregateError = global.AggregateError;\n    class ZoneAwarePromise {\n        static toString() {\n            return ZONE_AWARE_PROMISE_TO_STRING;\n        }\n        static resolve(value) {\n            return resolvePromise(new this(null), RESOLVED, value);\n        }\n        static reject(error) {\n            return resolvePromise(new this(null), REJECTED, error);\n        }\n        static any(values) {\n            if (!values || typeof values[Symbol.iterator] !== 'function') {\n                return Promise.reject(new AggregateError([], 'All promises were rejected'));\n            }\n            const promises = [];\n            let count = 0;\n            try {\n                for (let v of values) {\n                    count++;\n                    promises.push(ZoneAwarePromise.resolve(v));\n                }\n            }\n            catch (err) {\n                return Promise.reject(new AggregateError([], 'All promises were rejected'));\n            }\n            if (count === 0) {\n                return Promise.reject(new AggregateError([], 'All promises were rejected'));\n            }\n            let finished = false;\n            const errors = [];\n            return new ZoneAwarePromise((resolve, reject) => {\n                for (let i = 0; i < promises.length; i++) {\n                    promises[i].then(v => {\n                        if (finished) {\n                            return;\n                        }\n                        finished = true;\n                        resolve(v);\n                    }, err => {\n                        errors.push(err);\n                        count--;\n                        if (count === 0) {\n                            finished = true;\n                            reject(new AggregateError(errors, 'All promises were rejected'));\n                        }\n                    });\n                }\n            });\n        }\n        ;\n        static race(values) {\n            let resolve;\n            let reject;\n            let promise = new this((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            function onResolve(value) {\n                resolve(value);\n            }\n            function onReject(error) {\n                reject(error);\n            }\n            for (let value of values) {\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                value.then(onResolve, onReject);\n            }\n            return promise;\n        }\n        static all(values) {\n            return ZoneAwarePromise.allWithCallback(values);\n        }\n        static allSettled(values) {\n            const P = this && this.prototype instanceof ZoneAwarePromise ? this : ZoneAwarePromise;\n            return P.allWithCallback(values, {\n                thenCallback: (value) => ({ status: 'fulfilled', value }),\n                errorCallback: (err) => ({ status: 'rejected', reason: err })\n            });\n        }\n        static allWithCallback(values, callback) {\n            let resolve;\n            let reject;\n            let promise = new this((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            // Start at 2 to prevent prematurely resolving if .then is called immediately.\n            let unresolvedCount = 2;\n            let valueIndex = 0;\n            const resolvedValues = [];\n            for (let value of values) {\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                const curValueIndex = valueIndex;\n                try {\n                    value.then((value) => {\n                        resolvedValues[curValueIndex] = callback ? callback.thenCallback(value) : value;\n                        unresolvedCount--;\n                        if (unresolvedCount === 0) {\n                            resolve(resolvedValues);\n                        }\n                    }, (err) => {\n                        if (!callback) {\n                            reject(err);\n                        }\n                        else {\n                            resolvedValues[curValueIndex] = callback.errorCallback(err);\n                            unresolvedCount--;\n                            if (unresolvedCount === 0) {\n                                resolve(resolvedValues);\n                            }\n                        }\n                    });\n                }\n                catch (thenErr) {\n                    reject(thenErr);\n                }\n                unresolvedCount++;\n                valueIndex++;\n            }\n            // Make the unresolvedCount zero-based again.\n            unresolvedCount -= 2;\n            if (unresolvedCount === 0) {\n                resolve(resolvedValues);\n            }\n            return promise;\n        }\n        constructor(executor) {\n            const promise = this;\n            if (!(promise instanceof ZoneAwarePromise)) {\n                throw new Error('Must be an instanceof Promise.');\n            }\n            promise[symbolState] = UNRESOLVED;\n            promise[symbolValue] = []; // queue;\n            try {\n                const onceWrapper = once();\n                executor &&\n                    executor(onceWrapper(makeResolver(promise, RESOLVED)), onceWrapper(makeResolver(promise, REJECTED)));\n            }\n            catch (error) {\n                resolvePromise(promise, false, error);\n            }\n        }\n        get [Symbol.toStringTag]() {\n            return 'Promise';\n        }\n        get [Symbol.species]() {\n            return ZoneAwarePromise;\n        }\n        then(onFulfilled, onRejected) {\n            // We must read `Symbol.species` safely because `this` may be anything. For instance, `this`\n            // may be an object without a prototype (created through `Object.create(null)`); thus\n            // `this.constructor` will be undefined. One of the use cases is SystemJS creating\n            // prototype-less objects (modules) via `Object.create(null)`. The SystemJS creates an empty\n            // object and copies promise properties into that object (within the `getOrCreateLoad`\n            // function). The zone.js then checks if the resolved value has the `then` method and invokes\n            // it with the `value` context. Otherwise, this will throw an error: `TypeError: Cannot read\n            // properties of undefined (reading 'Symbol(Symbol.species)')`.\n            let C = this.constructor?.[Symbol.species];\n            if (!C || typeof C !== 'function') {\n                C = this.constructor || ZoneAwarePromise;\n            }\n            const chainPromise = new C(noop);\n            const zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\n            }\n            return chainPromise;\n        }\n        catch(onRejected) {\n            return this.then(null, onRejected);\n        }\n        finally(onFinally) {\n            // See comment on the call to `then` about why thee `Symbol.species` is safely accessed.\n            let C = this.constructor?.[Symbol.species];\n            if (!C || typeof C !== 'function') {\n                C = ZoneAwarePromise;\n            }\n            const chainPromise = new C(noop);\n            chainPromise[symbolFinally] = symbolFinally;\n            const zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFinally, onFinally);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFinally, onFinally);\n            }\n            return chainPromise;\n        }\n    }\n    // Protect against aggressive optimizers dropping seemingly unused properties.\n    // E.g. Closure Compiler in advanced mode.\n    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\n    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\n    ZoneAwarePromise['race'] = ZoneAwarePromise.race;\n    ZoneAwarePromise['all'] = ZoneAwarePromise.all;\n    const NativePromise = global[symbolPromise] = global['Promise'];\n    global['Promise'] = ZoneAwarePromise;\n    const symbolThenPatched = __symbol__('thenPatched');\n    function patchThen(Ctor) {\n        const proto = Ctor.prototype;\n        const prop = ObjectGetOwnPropertyDescriptor(proto, 'then');\n        if (prop && (prop.writable === false || !prop.configurable)) {\n            // check Ctor.prototype.then propertyDescriptor is writable or not\n            // in meteor env, writable is false, we should ignore such case\n            return;\n        }\n        const originalThen = proto.then;\n        // Keep a reference to the original method.\n        proto[symbolThen] = originalThen;\n        Ctor.prototype.then = function (onResolve, onReject) {\n            const wrapped = new ZoneAwarePromise((resolve, reject) => {\n                originalThen.call(this, resolve, reject);\n            });\n            return wrapped.then(onResolve, onReject);\n        };\n        Ctor[symbolThenPatched] = true;\n    }\n    api.patchThen = patchThen;\n    function zoneify(fn) {\n        return function (self, args) {\n            let resultPromise = fn.apply(self, args);\n            if (resultPromise instanceof ZoneAwarePromise) {\n                return resultPromise;\n            }\n            let ctor = resultPromise.constructor;\n            if (!ctor[symbolThenPatched]) {\n                patchThen(ctor);\n            }\n            return resultPromise;\n        };\n    }\n    if (NativePromise) {\n        patchThen(NativePromise);\n        patchMethod(global, 'fetch', delegate => zoneify(delegate));\n    }\n    // This is not part of public API, but it is useful for tests, so we expose it.\n    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\n    return ZoneAwarePromise;\n});\n\n// override Function.prototype.toString to make zone.js patched function\n// look like native function\nZone.__load_patch('toString', (global) => {\n    // patch Func.prototype.toString to let them look like native\n    const originalFunctionToString = Function.prototype.toString;\n    const ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');\n    const PROMISE_SYMBOL = zoneSymbol('Promise');\n    const ERROR_SYMBOL = zoneSymbol('Error');\n    const newFunctionToString = function toString() {\n        if (typeof this === 'function') {\n            const originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];\n            if (originalDelegate) {\n                if (typeof originalDelegate === 'function') {\n                    return originalFunctionToString.call(originalDelegate);\n                }\n                else {\n                    return Object.prototype.toString.call(originalDelegate);\n                }\n            }\n            if (this === Promise) {\n                const nativePromise = global[PROMISE_SYMBOL];\n                if (nativePromise) {\n                    return originalFunctionToString.call(nativePromise);\n                }\n            }\n            if (this === Error) {\n                const nativeError = global[ERROR_SYMBOL];\n                if (nativeError) {\n                    return originalFunctionToString.call(nativeError);\n                }\n            }\n        }\n        return originalFunctionToString.call(this);\n    };\n    newFunctionToString[ORIGINAL_DELEGATE_SYMBOL] = originalFunctionToString;\n    Function.prototype.toString = newFunctionToString;\n    // patch Object.prototype.toString to let them look like native\n    const originalObjectToString = Object.prototype.toString;\n    const PROMISE_OBJECT_TO_STRING = '[object Promise]';\n    Object.prototype.toString = function () {\n        if (typeof Promise === 'function' && this instanceof Promise) {\n            return PROMISE_OBJECT_TO_STRING;\n        }\n        return originalObjectToString.call(this);\n    };\n});\n\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nlet passiveSupported = false;\nif (typeof window !== 'undefined') {\n    try {\n        const options = Object.defineProperty({}, 'passive', {\n            get: function () {\n                passiveSupported = true;\n            }\n        });\n        // Note: We pass the `options` object as the event handler too. This is not compatible with the\n        // signature of `addEventListener` or `removeEventListener` but enables us to remove the handler\n        // without an actual handler.\n        window.addEventListener('test', options, options);\n        window.removeEventListener('test', options, options);\n    }\n    catch (err) {\n        passiveSupported = false;\n    }\n}\n// an identifier to tell ZoneTask do not create a new invoke closure\nconst OPTIMIZED_ZONE_EVENT_TASK_DATA = {\n    useG: true\n};\nconst zoneSymbolEventNames = {};\nconst globalSources = {};\nconst EVENT_NAME_SYMBOL_REGX = new RegExp('^' + ZONE_SYMBOL_PREFIX + '(\\\\w+)(true|false)$');\nconst IMMEDIATE_PROPAGATION_SYMBOL = zoneSymbol('propagationStopped');\nfunction prepareEventNames(eventName, eventNameToString) {\n    const falseEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + FALSE_STR;\n    const trueEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + TRUE_STR;\n    const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n    const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n    zoneSymbolEventNames[eventName] = {};\n    zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n    zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n}\nfunction patchEventTarget(_global, api, apis, patchOptions) {\n    const ADD_EVENT_LISTENER = (patchOptions && patchOptions.add) || ADD_EVENT_LISTENER_STR;\n    const REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.rm) || REMOVE_EVENT_LISTENER_STR;\n    const LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listeners) || 'eventListeners';\n    const REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.rmAll) || 'removeAllListeners';\n    const zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);\n    const ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';\n    const PREPEND_EVENT_LISTENER = 'prependListener';\n    const PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';\n    const invokeTask = function (task, target, event) {\n        // for better performance, check isRemoved which is set\n        // by removeEventListener\n        if (task.isRemoved) {\n            return;\n        }\n        const delegate = task.callback;\n        if (typeof delegate === 'object' && delegate.handleEvent) {\n            // create the bind version of handleEvent when invoke\n            task.callback = (event) => delegate.handleEvent(event);\n            task.originalDelegate = delegate;\n        }\n        // invoke static task.invoke\n        // need to try/catch error here, otherwise, the error in one event listener\n        // will break the executions of the other event listeners. Also error will\n        // not remove the event listener when `once` options is true.\n        let error;\n        try {\n            task.invoke(task, target, [event]);\n        }\n        catch (err) {\n            error = err;\n        }\n        const options = task.options;\n        if (options && typeof options === 'object' && options.once) {\n            // if options.once is true, after invoke once remove listener here\n            // only browser need to do this, nodejs eventEmitter will cal removeListener\n            // inside EventEmitter.once\n            const delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n            target[REMOVE_EVENT_LISTENER].call(target, event.type, delegate, options);\n        }\n        return error;\n    };\n    function globalCallback(context, event, isCapture) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samsung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        const target = context || event.target || _global;\n        const tasks = target[zoneSymbolEventNames[event.type][isCapture ? TRUE_STR : FALSE_STR]];\n        if (tasks) {\n            const errors = [];\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                const err = invokeTask(tasks[0], target, event);\n                err && errors.push(err);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                const copyTasks = tasks.slice();\n                for (let i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    const err = invokeTask(copyTasks[i], target, event);\n                    err && errors.push(err);\n                }\n            }\n            // Since there is only one error, we don't need to schedule microTask\n            // to throw the error.\n            if (errors.length === 1) {\n                throw errors[0];\n            }\n            else {\n                for (let i = 0; i < errors.length; i++) {\n                    const err = errors[i];\n                    api.nativeScheduleMicroTask(() => {\n                        throw err;\n                    });\n                }\n            }\n        }\n    }\n    // global shared zoneAwareCallback to handle all event callback with capture = false\n    const globalZoneAwareCallback = function (event) {\n        return globalCallback(this, event, false);\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = true\n    const globalZoneAwareCaptureCallback = function (event) {\n        return globalCallback(this, event, true);\n    };\n    function patchEventTargetMethods(obj, patchOptions) {\n        if (!obj) {\n            return false;\n        }\n        let useGlobalCallback = true;\n        if (patchOptions && patchOptions.useG !== undefined) {\n            useGlobalCallback = patchOptions.useG;\n        }\n        const validateHandler = patchOptions && patchOptions.vh;\n        let checkDuplicate = true;\n        if (patchOptions && patchOptions.chkDup !== undefined) {\n            checkDuplicate = patchOptions.chkDup;\n        }\n        let returnTarget = false;\n        if (patchOptions && patchOptions.rt !== undefined) {\n            returnTarget = patchOptions.rt;\n        }\n        let proto = obj;\n        while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {\n            proto = ObjectGetPrototypeOf(proto);\n        }\n        if (!proto && obj[ADD_EVENT_LISTENER]) {\n            // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n            proto = obj;\n        }\n        if (!proto) {\n            return false;\n        }\n        if (proto[zoneSymbolAddEventListener]) {\n            return false;\n        }\n        const eventNameToString = patchOptions && patchOptions.eventNameToString;\n        // a shared global taskData to pass data for scheduleEventTask\n        // so we do not need to create a new object just for pass some data\n        const taskData = {};\n        const nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];\n        const nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =\n            proto[REMOVE_EVENT_LISTENER];\n        const nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =\n            proto[LISTENERS_EVENT_LISTENER];\n        const nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =\n            proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];\n        let nativePrependEventListener;\n        if (patchOptions && patchOptions.prepend) {\n            nativePrependEventListener = proto[zoneSymbol(patchOptions.prepend)] =\n                proto[patchOptions.prepend];\n        }\n        /**\n         * This util function will build an option object with passive option\n         * to handle all possible input from the user.\n         */\n        function buildEventListenerOptions(options, passive) {\n            if (!passiveSupported && typeof options === 'object' && options) {\n                // doesn't support passive but user want to pass an object as options.\n                // this will not work on some old browser, so we just pass a boolean\n                // as useCapture parameter\n                return !!options.capture;\n            }\n            if (!passiveSupported || !passive) {\n                return options;\n            }\n            if (typeof options === 'boolean') {\n                return { capture: options, passive: true };\n            }\n            if (!options) {\n                return { passive: true };\n            }\n            if (typeof options === 'object' && options.passive !== false) {\n                return { ...options, passive: true };\n            }\n            return options;\n        }\n        const customScheduleGlobal = function (task) {\n            // if there is already a task for the eventName + capture,\n            // just return, because we use the shared globalZoneAwareCallback here.\n            if (taskData.isExisting) {\n                return;\n            }\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options);\n        };\n        const customCancelGlobal = function (task) {\n            // if task is not marked as isRemoved, this call is directly\n            // from Zone.prototype.cancelTask, we should remove the task\n            // from tasksList of target first\n            if (!task.isRemoved) {\n                const symbolEventNames = zoneSymbolEventNames[task.eventName];\n                let symbolEventName;\n                if (symbolEventNames) {\n                    symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];\n                }\n                const existingTasks = symbolEventName && task.target[symbolEventName];\n                if (existingTasks) {\n                    for (let i = 0; i < existingTasks.length; i++) {\n                        const existingTask = existingTasks[i];\n                        if (existingTask === task) {\n                            existingTasks.splice(i, 1);\n                            // set isRemoved to data for faster invokeTask check\n                            task.isRemoved = true;\n                            if (existingTasks.length === 0) {\n                                // all tasks for the eventName + capture have gone,\n                                // remove globalZoneAwareCallback and remove the task cache from target\n                                task.allRemoved = true;\n                                task.target[symbolEventName] = null;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            // if all tasks for the eventName + capture have gone,\n            // we will really remove the global event callback,\n            // if not, return\n            if (!task.allRemoved) {\n                return;\n            }\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.options);\n        };\n        const customScheduleNonGlobal = function (task) {\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customSchedulePrepend = function (task) {\n            return nativePrependEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customCancelNonGlobal = function (task) {\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.invoke, task.options);\n        };\n        const customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;\n        const customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;\n        const compareTaskCallbackVsDelegate = function (task, delegate) {\n            const typeOfDelegate = typeof delegate;\n            return (typeOfDelegate === 'function' && task.callback === delegate) ||\n                (typeOfDelegate === 'object' && task.originalDelegate === delegate);\n        };\n        const compare = (patchOptions && patchOptions.diff) ? patchOptions.diff : compareTaskCallbackVsDelegate;\n        const unpatchedEvents = Zone[zoneSymbol('UNPATCHED_EVENTS')];\n        const passiveEvents = _global[zoneSymbol('PASSIVE_EVENTS')];\n        const makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget = false, prepend = false) {\n            return function () {\n                const target = this || _global;\n                let eventName = arguments[0];\n                if (patchOptions && patchOptions.transferEventName) {\n                    eventName = patchOptions.transferEventName(eventName);\n                }\n                let delegate = arguments[1];\n                if (!delegate) {\n                    return nativeListener.apply(this, arguments);\n                }\n                if (isNode && eventName === 'uncaughtException') {\n                    // don't patch uncaughtException of nodejs to prevent endless loop\n                    return nativeListener.apply(this, arguments);\n                }\n                // don't create the bind delegate function for handleEvent\n                // case here to improve addEventListener performance\n                // we will create the bind delegate when invoke\n                let isHandleEvent = false;\n                if (typeof delegate !== 'function') {\n                    if (!delegate.handleEvent) {\n                        return nativeListener.apply(this, arguments);\n                    }\n                    isHandleEvent = true;\n                }\n                if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {\n                    return;\n                }\n                const passive = passiveSupported && !!passiveEvents && passiveEvents.indexOf(eventName) !== -1;\n                const options = buildEventListenerOptions(arguments[2], passive);\n                if (unpatchedEvents) {\n                    // check unpatched list\n                    for (let i = 0; i < unpatchedEvents.length; i++) {\n                        if (eventName === unpatchedEvents[i]) {\n                            if (passive) {\n                                return nativeListener.call(target, eventName, delegate, options);\n                            }\n                            else {\n                                return nativeListener.apply(this, arguments);\n                            }\n                        }\n                    }\n                }\n                const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\n                const once = options && typeof options === 'object' ? options.once : false;\n                const zone = Zone.current;\n                let symbolEventNames = zoneSymbolEventNames[eventName];\n                if (!symbolEventNames) {\n                    prepareEventNames(eventName, eventNameToString);\n                    symbolEventNames = zoneSymbolEventNames[eventName];\n                }\n                const symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n                let existingTasks = target[symbolEventName];\n                let isExisting = false;\n                if (existingTasks) {\n                    // already have task registered\n                    isExisting = true;\n                    if (checkDuplicate) {\n                        for (let i = 0; i < existingTasks.length; i++) {\n                            if (compare(existingTasks[i], delegate)) {\n                                // same callback, same capture, same event name, just return\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    existingTasks = target[symbolEventName] = [];\n                }\n                let source;\n                const constructorName = target.constructor['name'];\n                const targetSource = globalSources[constructorName];\n                if (targetSource) {\n                    source = targetSource[eventName];\n                }\n                if (!source) {\n                    source = constructorName + addSource +\n                        (eventNameToString ? eventNameToString(eventName) : eventName);\n                }\n                // do not create a new object as task.data to pass those things\n                // just use the global shared one\n                taskData.options = options;\n                if (once) {\n                    // if addEventListener with once options, we don't pass it to\n                    // native addEventListener, instead we keep the once setting\n                    // and handle ourselves.\n                    taskData.options.once = false;\n                }\n                taskData.target = target;\n                taskData.capture = capture;\n                taskData.eventName = eventName;\n                taskData.isExisting = isExisting;\n                const data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : undefined;\n                // keep taskData into data to allow onScheduleEventTask to access the task information\n                if (data) {\n                    data.taskData = taskData;\n                }\n                const task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);\n                // should clear taskData.target to avoid memory leak\n                // issue, https://github.com/angular/angular/issues/20442\n                taskData.target = null;\n                // need to clear up taskData because it is a global object\n                if (data) {\n                    data.taskData = null;\n                }\n                // have to save those information to task in case\n                // application may call task.zone.cancelTask() directly\n                if (once) {\n                    options.once = true;\n                }\n                if (!(!passiveSupported && typeof task.options === 'boolean')) {\n                    // if not support passive, and we pass an option object\n                    // to addEventListener, we should save the options to task\n                    task.options = options;\n                }\n                task.target = target;\n                task.capture = capture;\n                task.eventName = eventName;\n                if (isHandleEvent) {\n                    // save original delegate for compare to check duplicate\n                    task.originalDelegate = delegate;\n                }\n                if (!prepend) {\n                    existingTasks.push(task);\n                }\n                else {\n                    existingTasks.unshift(task);\n                }\n                if (returnTarget) {\n                    return target;\n                }\n            };\n        };\n        proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);\n        if (nativePrependEventListener) {\n            proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);\n        }\n        proto[REMOVE_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (patchOptions && patchOptions.transferEventName) {\n                eventName = patchOptions.transferEventName(eventName);\n            }\n            const options = arguments[2];\n            const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\n            const delegate = arguments[1];\n            if (!delegate) {\n                return nativeRemoveEventListener.apply(this, arguments);\n            }\n            if (validateHandler &&\n                !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {\n                return;\n            }\n            const symbolEventNames = zoneSymbolEventNames[eventName];\n            let symbolEventName;\n            if (symbolEventNames) {\n                symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n            }\n            const existingTasks = symbolEventName && target[symbolEventName];\n            if (existingTasks) {\n                for (let i = 0; i < existingTasks.length; i++) {\n                    const existingTask = existingTasks[i];\n                    if (compare(existingTask, delegate)) {\n                        existingTasks.splice(i, 1);\n                        // set isRemoved to data for faster invokeTask check\n                        existingTask.isRemoved = true;\n                        if (existingTasks.length === 0) {\n                            // all tasks for the eventName + capture have gone,\n                            // remove globalZoneAwareCallback and remove the task cache from target\n                            existingTask.allRemoved = true;\n                            target[symbolEventName] = null;\n                            // in the target, we have an event listener which is added by on_property\n                            // such as target.onclick = function() {}, so we need to clear this internal\n                            // property too if all delegates all removed\n                            if (typeof eventName === 'string') {\n                                const onPropertySymbol = ZONE_SYMBOL_PREFIX + 'ON_PROPERTY' + eventName;\n                                target[onPropertySymbol] = null;\n                            }\n                        }\n                        existingTask.zone.cancelTask(existingTask);\n                        if (returnTarget) {\n                            return target;\n                        }\n                        return;\n                    }\n                }\n            }\n            // issue 930, didn't find the event name or callback\n            // from zone kept existingTasks, the callback maybe\n            // added outside of zone, we need to call native removeEventListener\n            // to try to remove it.\n            return nativeRemoveEventListener.apply(this, arguments);\n        };\n        proto[LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (patchOptions && patchOptions.transferEventName) {\n                eventName = patchOptions.transferEventName(eventName);\n            }\n            const listeners = [];\n            const tasks = findEventTasks(target, eventNameToString ? eventNameToString(eventName) : eventName);\n            for (let i = 0; i < tasks.length; i++) {\n                const task = tasks[i];\n                let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                listeners.push(delegate);\n            }\n            return listeners;\n        };\n        proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (!eventName) {\n                const keys = Object.keys(target);\n                for (let i = 0; i < keys.length; i++) {\n                    const prop = keys[i];\n                    const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n                    let evtName = match && match[1];\n                    // in nodejs EventEmitter, removeListener event is\n                    // used for monitoring the removeListener call,\n                    // so just keep removeListener eventListener until\n                    // all other eventListeners are removed\n                    if (evtName && evtName !== 'removeListener') {\n                        this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, evtName);\n                    }\n                }\n                // remove removeListener listener finally\n                this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, 'removeListener');\n            }\n            else {\n                if (patchOptions && patchOptions.transferEventName) {\n                    eventName = patchOptions.transferEventName(eventName);\n                }\n                const symbolEventNames = zoneSymbolEventNames[eventName];\n                if (symbolEventNames) {\n                    const symbolEventName = symbolEventNames[FALSE_STR];\n                    const symbolCaptureEventName = symbolEventNames[TRUE_STR];\n                    const tasks = target[symbolEventName];\n                    const captureTasks = target[symbolCaptureEventName];\n                    if (tasks) {\n                        const removeTasks = tasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                    if (captureTasks) {\n                        const removeTasks = captureTasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                }\n            }\n            if (returnTarget) {\n                return this;\n            }\n        };\n        // for native toString patch\n        attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);\n        attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);\n        if (nativeRemoveAllListeners) {\n            attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);\n        }\n        if (nativeListeners) {\n            attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);\n        }\n        return true;\n    }\n    let results = [];\n    for (let i = 0; i < apis.length; i++) {\n        results[i] = patchEventTargetMethods(apis[i], patchOptions);\n    }\n    return results;\n}\nfunction findEventTasks(target, eventName) {\n    if (!eventName) {\n        const foundTasks = [];\n        for (let prop in target) {\n            const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n            let evtName = match && match[1];\n            if (evtName && (!eventName || evtName === eventName)) {\n                const tasks = target[prop];\n                if (tasks) {\n                    for (let i = 0; i < tasks.length; i++) {\n                        foundTasks.push(tasks[i]);\n                    }\n                }\n            }\n        }\n        return foundTasks;\n    }\n    let symbolEventName = zoneSymbolEventNames[eventName];\n    if (!symbolEventName) {\n        prepareEventNames(eventName);\n        symbolEventName = zoneSymbolEventNames[eventName];\n    }\n    const captureFalseTasks = target[symbolEventName[FALSE_STR]];\n    const captureTrueTasks = target[symbolEventName[TRUE_STR]];\n    if (!captureFalseTasks) {\n        return captureTrueTasks ? captureTrueTasks.slice() : [];\n    }\n    else {\n        return captureTrueTasks ? captureFalseTasks.concat(captureTrueTasks) :\n            captureFalseTasks.slice();\n    }\n}\nfunction patchEventPrototype(global, api) {\n    const Event = global['Event'];\n    if (Event && Event.prototype) {\n        api.patchMethod(Event.prototype, 'stopImmediatePropagation', (delegate) => function (self, args) {\n            self[IMMEDIATE_PROPAGATION_SYMBOL] = true;\n            // we need to call the native stopImmediatePropagation\n            // in case in some hybrid application, some part of\n            // application will be controlled by zone, some are not\n            delegate && delegate.apply(self, args);\n        });\n    }\n}\n\nfunction patchCallbacks(api, target, targetName, method, callbacks) {\n    const symbol = Zone.__symbol__(method);\n    if (target[symbol]) {\n        return;\n    }\n    const nativeDelegate = target[symbol] = target[method];\n    target[method] = function (name, opts, options) {\n        if (opts && opts.prototype) {\n            callbacks.forEach(function (callback) {\n                const source = `${targetName}.${method}::` + callback;\n                const prototype = opts.prototype;\n                // Note: the `patchCallbacks` is used for patching the `document.registerElement` and\n                // `customElements.define`. We explicitly wrap the patching code into try-catch since\n                // callbacks may be already patched by other web components frameworks (e.g. LWC), and they\n                // make those properties non-writable. This means that patching callback will throw an error\n                // `cannot assign to read-only property`. See this code as an example:\n                // https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-core/src/framework/base-bridge-element.ts#L180-L186\n                // We don't want to stop the application rendering if we couldn't patch some\n                // callback, e.g. `attributeChangedCallback`.\n                try {\n                    if (prototype.hasOwnProperty(callback)) {\n                        const descriptor = api.ObjectGetOwnPropertyDescriptor(prototype, callback);\n                        if (descriptor && descriptor.value) {\n                            descriptor.value = api.wrapWithCurrentZone(descriptor.value, source);\n                            api._redefineProperty(opts.prototype, callback, descriptor);\n                        }\n                        else if (prototype[callback]) {\n                            prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                        }\n                    }\n                    else if (prototype[callback]) {\n                        prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                    }\n                }\n                catch {\n                    // Note: we leave the catch block empty since there's no way to handle the error related\n                    // to non-writable property.\n                }\n            });\n        }\n        return nativeDelegate.call(target, name, opts, options);\n    };\n    api.attachOriginToPatched(target[method], nativeDelegate);\n}\n\n/**\n * @fileoverview\n * @suppress {globalThis}\n */\nfunction filterProperties(target, onProperties, ignoreProperties) {\n    if (!ignoreProperties || ignoreProperties.length === 0) {\n        return onProperties;\n    }\n    const tip = ignoreProperties.filter(ip => ip.target === target);\n    if (!tip || tip.length === 0) {\n        return onProperties;\n    }\n    const targetIgnoreProperties = tip[0].ignoreProperties;\n    return onProperties.filter(op => targetIgnoreProperties.indexOf(op) === -1);\n}\nfunction patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {\n    // check whether target is available, sometimes target will be undefined\n    // because different browser or some 3rd party plugin.\n    if (!target) {\n        return;\n    }\n    const filteredProperties = filterProperties(target, onProperties, ignoreProperties);\n    patchOnProperties(target, filteredProperties, prototype);\n}\n/**\n * Get all event name properties which the event name startsWith `on`\n * from the target object itself, inherited properties are not considered.\n */\nfunction getOnEventNames(target) {\n    return Object.getOwnPropertyNames(target)\n        .filter(name => name.startsWith('on') && name.length > 2)\n        .map(name => name.substring(2));\n}\nfunction propertyDescriptorPatch(api, _global) {\n    if (isNode && !isMix) {\n        return;\n    }\n    if (Zone[api.symbol('patchEvents')]) {\n        // events are already been patched by legacy patch.\n        return;\n    }\n    const ignoreProperties = _global['__Zone_ignore_on_properties'];\n    // for browsers that we can patch the descriptor:  Chrome & Firefox\n    let patchTargets = [];\n    if (isBrowser) {\n        const internalWindow = window;\n        patchTargets = patchTargets.concat([\n            'Document', 'SVGElement', 'Element', 'HTMLElement', 'HTMLBodyElement', 'HTMLMediaElement',\n            'HTMLFrameSetElement', 'HTMLFrameElement', 'HTMLIFrameElement', 'HTMLMarqueeElement', 'Worker'\n        ]);\n        const ignoreErrorProperties = isIE() ? [{ target: internalWindow, ignoreProperties: ['error'] }] : [];\n        // in IE/Edge, onProp not exist in window object, but in WindowPrototype\n        // so we need to pass WindowPrototype to check onProp exist or not\n        patchFilteredProperties(internalWindow, getOnEventNames(internalWindow), ignoreProperties ? ignoreProperties.concat(ignoreErrorProperties) : ignoreProperties, ObjectGetPrototypeOf(internalWindow));\n    }\n    patchTargets = patchTargets.concat([\n        'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'IDBIndex', 'IDBRequest', 'IDBOpenDBRequest',\n        'IDBDatabase', 'IDBTransaction', 'IDBCursor', 'WebSocket'\n    ]);\n    for (let i = 0; i < patchTargets.length; i++) {\n        const target = _global[patchTargets[i]];\n        target && target.prototype &&\n            patchFilteredProperties(target.prototype, getOnEventNames(target.prototype), ignoreProperties);\n    }\n}\n\nZone.__load_patch('util', (global, Zone, api) => {\n    // Collect native event names by looking at properties\n    // on the global namespace, e.g. 'onclick'.\n    const eventNames = getOnEventNames(global);\n    api.patchOnProperties = patchOnProperties;\n    api.patchMethod = patchMethod;\n    api.bindArguments = bindArguments;\n    api.patchMacroTask = patchMacroTask;\n    // In earlier version of zone.js (<0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS` to\n    // define which events will not be patched by `Zone.js`.\n    // In newer version (>=0.9.0), we change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep\n    // the name consistent with angular repo.\n    // The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be supported for\n    // backwards compatibility.\n    const SYMBOL_BLACK_LISTED_EVENTS = Zone.__symbol__('BLACK_LISTED_EVENTS');\n    const SYMBOL_UNPATCHED_EVENTS = Zone.__symbol__('UNPATCHED_EVENTS');\n    if (global[SYMBOL_UNPATCHED_EVENTS]) {\n        global[SYMBOL_BLACK_LISTED_EVENTS] = global[SYMBOL_UNPATCHED_EVENTS];\n    }\n    if (global[SYMBOL_BLACK_LISTED_EVENTS]) {\n        Zone[SYMBOL_BLACK_LISTED_EVENTS] = Zone[SYMBOL_UNPATCHED_EVENTS] =\n            global[SYMBOL_BLACK_LISTED_EVENTS];\n    }\n    api.patchEventPrototype = patchEventPrototype;\n    api.patchEventTarget = patchEventTarget;\n    api.isIEOrEdge = isIEOrEdge;\n    api.ObjectDefineProperty = ObjectDefineProperty;\n    api.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;\n    api.ObjectCreate = ObjectCreate;\n    api.ArraySlice = ArraySlice;\n    api.patchClass = patchClass;\n    api.wrapWithCurrentZone = wrapWithCurrentZone;\n    api.filterProperties = filterProperties;\n    api.attachOriginToPatched = attachOriginToPatched;\n    api._redefineProperty = Object.defineProperty;\n    api.patchCallbacks = patchCallbacks;\n    api.getGlobalObjects = () => ({\n        globalSources,\n        zoneSymbolEventNames,\n        eventNames,\n        isBrowser,\n        isMix,\n        isNode,\n        TRUE_STR,\n        FALSE_STR,\n        ZONE_SYMBOL_PREFIX,\n        ADD_EVENT_LISTENER_STR,\n        REMOVE_EVENT_LISTENER_STR\n    });\n});\n\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nfunction patchQueueMicrotask(global, api) {\n    api.patchMethod(global, 'queueMicrotask', (delegate) => {\n        return function (self, args) {\n            Zone.current.scheduleMicroTask('queueMicrotask', args[0]);\n        };\n    });\n}\n\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nconst taskSymbol = zoneSymbol('zoneTask');\nfunction patchTimer(window, setName, cancelName, nameSuffix) {\n    let setNative = null;\n    let clearNative = null;\n    setName += nameSuffix;\n    cancelName += nameSuffix;\n    const tasksByHandleId = {};\n    function scheduleTask(task) {\n        const data = task.data;\n        data.args[0] = function () {\n            return task.invoke.apply(this, arguments);\n        };\n        data.handleId = setNative.apply(window, data.args);\n        return task;\n    }\n    function clearTask(task) {\n        return clearNative.call(window, task.data.handleId);\n    }\n    setNative =\n        patchMethod(window, setName, (delegate) => function (self, args) {\n            if (typeof args[0] === 'function') {\n                const options = {\n                    isPeriodic: nameSuffix === 'Interval',\n                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 :\n                        undefined,\n                    args: args\n                };\n                const callback = args[0];\n                args[0] = function timer() {\n                    try {\n                        return callback.apply(this, arguments);\n                    }\n                    finally {\n                        // issue-934, task will be cancelled\n                        // even it is a periodic task such as\n                        // setInterval\n                        // https://github.com/angular/angular/issues/40387\n                        // Cleanup tasksByHandleId should be handled before scheduleTask\n                        // Since some zoneSpec may intercept and doesn't trigger\n                        // scheduleFn(scheduleTask) provided here.\n                        if (!(options.isPeriodic)) {\n                            if (typeof options.handleId === 'number') {\n                                // in non-nodejs env, we remove timerId\n                                // from local cache\n                                delete tasksByHandleId[options.handleId];\n                            }\n                            else if (options.handleId) {\n                                // Node returns complex objects as handleIds\n                                // we remove task reference from timer object\n                                options.handleId[taskSymbol] = null;\n                            }\n                        }\n                    }\n                };\n                const task = scheduleMacroTaskWithCurrentZone(setName, args[0], options, scheduleTask, clearTask);\n                if (!task) {\n                    return task;\n                }\n                // Node.js must additionally support the ref and unref functions.\n                const handle = task.data.handleId;\n                if (typeof handle === 'number') {\n                    // for non nodejs env, we save handleId: task\n                    // mapping in local cache for clearTimeout\n                    tasksByHandleId[handle] = task;\n                }\n                else if (handle) {\n                    // for nodejs env, we save task\n                    // reference in timerId Object for clearTimeout\n                    handle[taskSymbol] = task;\n                }\n                // check whether handle is null, because some polyfill or browser\n                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame\n                if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&\n                    typeof handle.unref === 'function') {\n                    task.ref = handle.ref.bind(handle);\n                    task.unref = handle.unref.bind(handle);\n                }\n                if (typeof handle === 'number' || handle) {\n                    return handle;\n                }\n                return task;\n            }\n            else {\n                // cause an error by calling it directly.\n                return delegate.apply(window, args);\n            }\n        });\n    clearNative =\n        patchMethod(window, cancelName, (delegate) => function (self, args) {\n            const id = args[0];\n            let task;\n            if (typeof id === 'number') {\n                // non nodejs env.\n                task = tasksByHandleId[id];\n            }\n            else {\n                // nodejs env.\n                task = id && id[taskSymbol];\n                // other environments.\n                if (!task) {\n                    task = id;\n                }\n            }\n            if (task && typeof task.type === 'string') {\n                if (task.state !== 'notScheduled' &&\n                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {\n                    if (typeof id === 'number') {\n                        delete tasksByHandleId[id];\n                    }\n                    else if (id) {\n                        id[taskSymbol] = null;\n                    }\n                    // Do not cancel already canceled functions\n                    task.zone.cancelTask(task);\n                }\n            }\n            else {\n                // cause an error by calling it directly.\n                delegate.apply(window, args);\n            }\n        });\n}\n\nfunction patchCustomElements(_global, api) {\n    const { isBrowser, isMix } = api.getGlobalObjects();\n    if ((!isBrowser && !isMix) || !_global['customElements'] || !('customElements' in _global)) {\n        return;\n    }\n    const callbacks = ['connectedCallback', 'disconnectedCallback', 'adoptedCallback', 'attributeChangedCallback'];\n    api.patchCallbacks(api, _global.customElements, 'customElements', 'define', callbacks);\n}\n\nfunction eventTargetPatch(_global, api) {\n    if (Zone[api.symbol('patchEventTarget')]) {\n        // EventTarget is already patched.\n        return;\n    }\n    const { eventNames, zoneSymbolEventNames, TRUE_STR, FALSE_STR, ZONE_SYMBOL_PREFIX } = api.getGlobalObjects();\n    //  predefine all __zone_symbol__ + eventName + true/false string\n    for (let i = 0; i < eventNames.length; i++) {\n        const eventName = eventNames[i];\n        const falseEventName = eventName + FALSE_STR;\n        const trueEventName = eventName + TRUE_STR;\n        const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n        const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n        zoneSymbolEventNames[eventName] = {};\n        zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n        zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n    }\n    const EVENT_TARGET = _global['EventTarget'];\n    if (!EVENT_TARGET || !EVENT_TARGET.prototype) {\n        return;\n    }\n    api.patchEventTarget(_global, api, [EVENT_TARGET && EVENT_TARGET.prototype]);\n    return true;\n}\nfunction patchEvent(global, api) {\n    api.patchEventPrototype(global, api);\n}\n\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nZone.__load_patch('legacy', (global) => {\n    const legacyPatch = global[Zone.__symbol__('legacyPatch')];\n    if (legacyPatch) {\n        legacyPatch();\n    }\n});\nZone.__load_patch('timers', (global) => {\n    const set = 'set';\n    const clear = 'clear';\n    patchTimer(global, set, clear, 'Timeout');\n    patchTimer(global, set, clear, 'Interval');\n    patchTimer(global, set, clear, 'Immediate');\n});\nZone.__load_patch('requestAnimationFrame', (global) => {\n    patchTimer(global, 'request', 'cancel', 'AnimationFrame');\n    patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');\n    patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\n});\nZone.__load_patch('blocking', (global, Zone) => {\n    const blockingMethods = ['alert', 'prompt', 'confirm'];\n    for (let i = 0; i < blockingMethods.length; i++) {\n        const name = blockingMethods[i];\n        patchMethod(global, name, (delegate, symbol, name) => {\n            return function (s, args) {\n                return Zone.current.run(delegate, global, args, name);\n            };\n        });\n    }\n});\nZone.__load_patch('EventTarget', (global, Zone, api) => {\n    patchEvent(global, api);\n    eventTargetPatch(global, api);\n    // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener\n    const XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];\n    if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {\n        api.patchEventTarget(global, api, [XMLHttpRequestEventTarget.prototype]);\n    }\n});\nZone.__load_patch('MutationObserver', (global, Zone, api) => {\n    patchClass('MutationObserver');\n    patchClass('WebKitMutationObserver');\n});\nZone.__load_patch('IntersectionObserver', (global, Zone, api) => {\n    patchClass('IntersectionObserver');\n});\nZone.__load_patch('FileReader', (global, Zone, api) => {\n    patchClass('FileReader');\n});\nZone.__load_patch('on_property', (global, Zone, api) => {\n    propertyDescriptorPatch(api, global);\n});\nZone.__load_patch('customElements', (global, Zone, api) => {\n    patchCustomElements(global, api);\n});\nZone.__load_patch('XHR', (global, Zone) => {\n    // Treat XMLHttpRequest as a macrotask.\n    patchXHR(global);\n    const XHR_TASK = zoneSymbol('xhrTask');\n    const XHR_SYNC = zoneSymbol('xhrSync');\n    const XHR_LISTENER = zoneSymbol('xhrListener');\n    const XHR_SCHEDULED = zoneSymbol('xhrScheduled');\n    const XHR_URL = zoneSymbol('xhrURL');\n    const XHR_ERROR_BEFORE_SCHEDULED = zoneSymbol('xhrErrorBeforeScheduled');\n    function patchXHR(window) {\n        const XMLHttpRequest = window['XMLHttpRequest'];\n        if (!XMLHttpRequest) {\n            // XMLHttpRequest is not available in service worker\n            return;\n        }\n        const XMLHttpRequestPrototype = XMLHttpRequest.prototype;\n        function findPendingTask(target) {\n            return target[XHR_TASK];\n        }\n        let oriAddListener = XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n        let oriRemoveListener = XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n        if (!oriAddListener) {\n            const XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];\n            if (XMLHttpRequestEventTarget) {\n                const XMLHttpRequestEventTargetPrototype = XMLHttpRequestEventTarget.prototype;\n                oriAddListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                oriRemoveListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n            }\n        }\n        const READY_STATE_CHANGE = 'readystatechange';\n        const SCHEDULED = 'scheduled';\n        function scheduleTask(task) {\n            const data = task.data;\n            const target = data.target;\n            target[XHR_SCHEDULED] = false;\n            target[XHR_ERROR_BEFORE_SCHEDULED] = false;\n            // remove existing event listener\n            const listener = target[XHR_LISTENER];\n            if (!oriAddListener) {\n                oriAddListener = target[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                oriRemoveListener = target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n            }\n            if (listener) {\n                oriRemoveListener.call(target, READY_STATE_CHANGE, listener);\n            }\n            const newListener = target[XHR_LISTENER] = () => {\n                if (target.readyState === target.DONE) {\n                    // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with\n                    // readyState=4 multiple times, so we need to check task state here\n                    if (!data.aborted && target[XHR_SCHEDULED] && task.state === SCHEDULED) {\n                        // check whether the xhr has registered onload listener\n                        // if that is the case, the task should invoke after all\n                        // onload listeners finish.\n                        // Also if the request failed without response (status = 0), the load event handler\n                        // will not be triggered, in that case, we should also invoke the placeholder callback\n                        // to close the XMLHttpRequest::send macroTask.\n                        // https://github.com/angular/angular/issues/38795\n                        const loadTasks = target[Zone.__symbol__('loadfalse')];\n                        if (target.status !== 0 && loadTasks && loadTasks.length > 0) {\n                            const oriInvoke = task.invoke;\n                            task.invoke = function () {\n                                // need to load the tasks again, because in other\n                                // load listener, they may remove themselves\n                                const loadTasks = target[Zone.__symbol__('loadfalse')];\n                                for (let i = 0; i < loadTasks.length; i++) {\n                                    if (loadTasks[i] === task) {\n                                        loadTasks.splice(i, 1);\n                                    }\n                                }\n                                if (!data.aborted && task.state === SCHEDULED) {\n                                    oriInvoke.call(task);\n                                }\n                            };\n                            loadTasks.push(task);\n                        }\n                        else {\n                            task.invoke();\n                        }\n                    }\n                    else if (!data.aborted && target[XHR_SCHEDULED] === false) {\n                        // error occurs when xhr.send()\n                        target[XHR_ERROR_BEFORE_SCHEDULED] = true;\n                    }\n                }\n            };\n            oriAddListener.call(target, READY_STATE_CHANGE, newListener);\n            const storedTask = target[XHR_TASK];\n            if (!storedTask) {\n                target[XHR_TASK] = task;\n            }\n            sendNative.apply(target, data.args);\n            target[XHR_SCHEDULED] = true;\n            return task;\n        }\n        function placeholderCallback() { }\n        function clearTask(task) {\n            const data = task.data;\n            // Note - ideally, we would call data.target.removeEventListener here, but it's too late\n            // to prevent it from firing. So instead, we store info for the event listener.\n            data.aborted = true;\n            return abortNative.apply(data.target, data.args);\n        }\n        const openNative = patchMethod(XMLHttpRequestPrototype, 'open', () => function (self, args) {\n            self[XHR_SYNC] = args[2] == false;\n            self[XHR_URL] = args[1];\n            return openNative.apply(self, args);\n        });\n        const XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';\n        const fetchTaskAborting = zoneSymbol('fetchTaskAborting');\n        const fetchTaskScheduling = zoneSymbol('fetchTaskScheduling');\n        const sendNative = patchMethod(XMLHttpRequestPrototype, 'send', () => function (self, args) {\n            if (Zone.current[fetchTaskScheduling] === true) {\n                // a fetch is scheduling, so we are using xhr to polyfill fetch\n                // and because we already schedule macroTask for fetch, we should\n                // not schedule a macroTask for xhr again\n                return sendNative.apply(self, args);\n            }\n            if (self[XHR_SYNC]) {\n                // if the XHR is sync there is no task to schedule, just execute the code.\n                return sendNative.apply(self, args);\n            }\n            else {\n                const options = { target: self, url: self[XHR_URL], isPeriodic: false, args: args, aborted: false };\n                const task = scheduleMacroTaskWithCurrentZone(XMLHTTPREQUEST_SOURCE, placeholderCallback, options, scheduleTask, clearTask);\n                if (self && self[XHR_ERROR_BEFORE_SCHEDULED] === true && !options.aborted &&\n                    task.state === SCHEDULED) {\n                    // xhr request throw error when send\n                    // we should invoke task instead of leaving a scheduled\n                    // pending macroTask\n                    task.invoke();\n                }\n            }\n        });\n        const abortNative = patchMethod(XMLHttpRequestPrototype, 'abort', () => function (self, args) {\n            const task = findPendingTask(self);\n            if (task && typeof task.type == 'string') {\n                // If the XHR has already completed, do nothing.\n                // If the XHR has already been aborted, do nothing.\n                // Fix #569, call abort multiple times before done will cause\n                // macroTask task count be negative number\n                if (task.cancelFn == null || (task.data && task.data.aborted)) {\n                    return;\n                }\n                task.zone.cancelTask(task);\n            }\n            else if (Zone.current[fetchTaskAborting] === true) {\n                // the abort is called from fetch polyfill, we need to call native abort of XHR.\n                return abortNative.apply(self, args);\n            }\n            // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no\n            // task\n            // to cancel. Do nothing.\n        });\n    }\n});\nZone.__load_patch('geolocation', (global) => {\n    /// GEO_LOCATION\n    if (global['navigator'] && global['navigator'].geolocation) {\n        patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);\n    }\n});\nZone.__load_patch('PromiseRejectionEvent', (global, Zone) => {\n    // handle unhandled promise rejection\n    function findPromiseRejectionHandler(evtName) {\n        return function (e) {\n            const eventTasks = findEventTasks(global, evtName);\n            eventTasks.forEach(eventTask => {\n                // windows has added unhandledrejection event listener\n                // trigger the event listener\n                const PromiseRejectionEvent = global['PromiseRejectionEvent'];\n                if (PromiseRejectionEvent) {\n                    const evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });\n                    eventTask.invoke(evt);\n                }\n            });\n        };\n    }\n    if (global['PromiseRejectionEvent']) {\n        Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =\n            findPromiseRejectionHandler('unhandledrejection');\n        Zone[zoneSymbol('rejectionHandledHandler')] =\n            findPromiseRejectionHandler('rejectionhandled');\n    }\n});\nZone.__load_patch('queueMicrotask', (global, Zone, api) => {\n    patchQueueMicrotask(global, api);\n});\n","'use strict';\n/**\n * @license Angular v<unknown>\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview\n * @suppress {globalThis}\n */\nconst NEWLINE = '\\n';\nconst IGNORE_FRAMES = {};\nconst creationTrace = '__creationTrace__';\nconst ERROR_TAG = 'STACKTRACE TRACKING';\nconst SEP_TAG = '__SEP_TAG__';\nlet sepTemplate = SEP_TAG + '@[native]';\nclass LongStackTrace {\n    constructor() {\n        this.error = getStacktrace();\n        this.timestamp = new Date();\n    }\n}\nfunction getStacktraceWithUncaughtError() {\n    return new Error(ERROR_TAG);\n}\nfunction getStacktraceWithCaughtError() {\n    try {\n        throw getStacktraceWithUncaughtError();\n    }\n    catch (err) {\n        return err;\n    }\n}\n// Some implementations of exception handling don't create a stack trace if the exception\n// isn't thrown, however it's faster not to actually throw the exception.\nconst error = getStacktraceWithUncaughtError();\nconst caughtError = getStacktraceWithCaughtError();\nconst getStacktrace = error.stack ?\n    getStacktraceWithUncaughtError :\n    (caughtError.stack ? getStacktraceWithCaughtError : getStacktraceWithUncaughtError);\nfunction getFrames(error) {\n    return error.stack ? error.stack.split(NEWLINE) : [];\n}\nfunction addErrorStack(lines, error) {\n    let trace = getFrames(error);\n    for (let i = 0; i < trace.length; i++) {\n        const frame = trace[i];\n        // Filter out the Frames which are part of stack capturing.\n        if (!IGNORE_FRAMES.hasOwnProperty(frame)) {\n            lines.push(trace[i]);\n        }\n    }\n}\nfunction renderLongStackTrace(frames, stack) {\n    const longTrace = [stack ? stack.trim() : ''];\n    if (frames) {\n        let timestamp = new Date().getTime();\n        for (let i = 0; i < frames.length; i++) {\n            const traceFrames = frames[i];\n            const lastTime = traceFrames.timestamp;\n            let separator = `____________________Elapsed ${timestamp - lastTime.getTime()} ms; At: ${lastTime}`;\n            separator = separator.replace(/[^\\w\\d]/g, '_');\n            longTrace.push(sepTemplate.replace(SEP_TAG, separator));\n            addErrorStack(longTrace, traceFrames.error);\n            timestamp = lastTime.getTime();\n        }\n    }\n    return longTrace.join(NEWLINE);\n}\n// if Error.stackTraceLimit is 0, means stack trace\n// is disabled, so we don't need to generate long stack trace\n// this will improve performance in some test(some test will\n// set stackTraceLimit to 0, https://github.com/angular/zone.js/issues/698\nfunction stackTracesEnabled() {\n    // Cast through any since this property only exists on Error in the nodejs\n    // typings.\n    return Error.stackTraceLimit > 0;\n}\nZone['longStackTraceZoneSpec'] = {\n    name: 'long-stack-trace',\n    longStackTraceLimit: 10,\n    // add a getLongStackTrace method in spec to\n    // handle handled reject promise error.\n    getLongStackTrace: function (error) {\n        if (!error) {\n            return undefined;\n        }\n        const trace = error[Zone.__symbol__('currentTaskTrace')];\n        if (!trace) {\n            return error.stack;\n        }\n        return renderLongStackTrace(trace, error.stack);\n    },\n    onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {\n        if (stackTracesEnabled()) {\n            const currentTask = Zone.currentTask;\n            let trace = currentTask && currentTask.data && currentTask.data[creationTrace] || [];\n            trace = [new LongStackTrace()].concat(trace);\n            if (trace.length > this.longStackTraceLimit) {\n                trace.length = this.longStackTraceLimit;\n            }\n            if (!task.data)\n                task.data = {};\n            if (task.type === 'eventTask') {\n                // Fix issue https://github.com/angular/zone.js/issues/1195,\n                // For event task of browser, by default, all task will share a\n                // singleton instance of data object, we should create a new one here\n                // The cast to `any` is required to workaround a closure bug which wrongly applies\n                // URL sanitization rules to .data access.\n                task.data = { ...task.data };\n            }\n            task.data[creationTrace] = trace;\n        }\n        return parentZoneDelegate.scheduleTask(targetZone, task);\n    },\n    onHandleError: function (parentZoneDelegate, currentZone, targetZone, error) {\n        if (stackTracesEnabled()) {\n            const parentTask = Zone.currentTask || error.task;\n            if (error instanceof Error && parentTask) {\n                const longStack = renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], error.stack);\n                try {\n                    error.stack = error.longStack = longStack;\n                }\n                catch (err) {\n                }\n            }\n        }\n        return parentZoneDelegate.handleError(targetZone, error);\n    }\n};\nfunction captureStackTraces(stackTraces, count) {\n    if (count > 0) {\n        stackTraces.push(getFrames((new LongStackTrace()).error));\n        captureStackTraces(stackTraces, count - 1);\n    }\n}\nfunction computeIgnoreFrames() {\n    if (!stackTracesEnabled()) {\n        return;\n    }\n    const frames = [];\n    captureStackTraces(frames, 2);\n    const frames1 = frames[0];\n    const frames2 = frames[1];\n    for (let i = 0; i < frames1.length; i++) {\n        const frame1 = frames1[i];\n        if (frame1.indexOf(ERROR_TAG) == -1) {\n            let match = frame1.match(/^\\s*at\\s+/);\n            if (match) {\n                sepTemplate = match[0] + SEP_TAG + ' (http://localhost)';\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < frames1.length; i++) {\n        const frame1 = frames1[i];\n        const frame2 = frames2[i];\n        if (frame1 === frame2) {\n            IGNORE_FRAMES[frame1] = true;\n        }\n        else {\n            break;\n        }\n    }\n}\ncomputeIgnoreFrames();\n\nclass ProxyZoneSpec {\n    static get() {\n        return Zone.current.get('ProxyZoneSpec');\n    }\n    static isLoaded() {\n        return ProxyZoneSpec.get() instanceof ProxyZoneSpec;\n    }\n    static assertPresent() {\n        if (!ProxyZoneSpec.isLoaded()) {\n            throw new Error(`Expected to be running in 'ProxyZone', but it was not found.`);\n        }\n        return ProxyZoneSpec.get();\n    }\n    constructor(defaultSpecDelegate = null) {\n        this.defaultSpecDelegate = defaultSpecDelegate;\n        this.name = 'ProxyZone';\n        this._delegateSpec = null;\n        this.properties = { 'ProxyZoneSpec': this };\n        this.propertyKeys = null;\n        this.lastTaskState = null;\n        this.isNeedToTriggerHasTask = false;\n        this.tasks = [];\n        this.setDelegate(defaultSpecDelegate);\n    }\n    setDelegate(delegateSpec) {\n        const isNewDelegate = this._delegateSpec !== delegateSpec;\n        this._delegateSpec = delegateSpec;\n        this.propertyKeys && this.propertyKeys.forEach((key) => delete this.properties[key]);\n        this.propertyKeys = null;\n        if (delegateSpec && delegateSpec.properties) {\n            this.propertyKeys = Object.keys(delegateSpec.properties);\n            this.propertyKeys.forEach((k) => this.properties[k] = delegateSpec.properties[k]);\n        }\n        // if a new delegateSpec was set, check if we need to trigger hasTask\n        if (isNewDelegate && this.lastTaskState &&\n            (this.lastTaskState.macroTask || this.lastTaskState.microTask)) {\n            this.isNeedToTriggerHasTask = true;\n        }\n    }\n    getDelegate() {\n        return this._delegateSpec;\n    }\n    resetDelegate() {\n        this.getDelegate();\n        this.setDelegate(this.defaultSpecDelegate);\n    }\n    tryTriggerHasTask(parentZoneDelegate, currentZone, targetZone) {\n        if (this.isNeedToTriggerHasTask && this.lastTaskState) {\n            // last delegateSpec has microTask or macroTask\n            // should call onHasTask in current delegateSpec\n            this.isNeedToTriggerHasTask = false;\n            this.onHasTask(parentZoneDelegate, currentZone, targetZone, this.lastTaskState);\n        }\n    }\n    removeFromTasks(task) {\n        if (!this.tasks) {\n            return;\n        }\n        for (let i = 0; i < this.tasks.length; i++) {\n            if (this.tasks[i] === task) {\n                this.tasks.splice(i, 1);\n                return;\n            }\n        }\n    }\n    getAndClearPendingTasksInfo() {\n        if (this.tasks.length === 0) {\n            return '';\n        }\n        const taskInfo = this.tasks.map((task) => {\n            const dataInfo = task.data &&\n                Object.keys(task.data)\n                    .map((key) => {\n                    return key + ':' + task.data[key];\n                })\n                    .join(',');\n            return `type: ${task.type}, source: ${task.source}, args: {${dataInfo}}`;\n        });\n        const pendingTasksInfo = '--Pending async tasks are: [' + taskInfo + ']';\n        // clear tasks\n        this.tasks = [];\n        return pendingTasksInfo;\n    }\n    onFork(parentZoneDelegate, currentZone, targetZone, zoneSpec) {\n        if (this._delegateSpec && this._delegateSpec.onFork) {\n            return this._delegateSpec.onFork(parentZoneDelegate, currentZone, targetZone, zoneSpec);\n        }\n        else {\n            return parentZoneDelegate.fork(targetZone, zoneSpec);\n        }\n    }\n    onIntercept(parentZoneDelegate, currentZone, targetZone, delegate, source) {\n        if (this._delegateSpec && this._delegateSpec.onIntercept) {\n            return this._delegateSpec.onIntercept(parentZoneDelegate, currentZone, targetZone, delegate, source);\n        }\n        else {\n            return parentZoneDelegate.intercept(targetZone, delegate, source);\n        }\n    }\n    onInvoke(parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {\n        this.tryTriggerHasTask(parentZoneDelegate, currentZone, targetZone);\n        if (this._delegateSpec && this._delegateSpec.onInvoke) {\n            return this._delegateSpec.onInvoke(parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source);\n        }\n        else {\n            return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);\n        }\n    }\n    onHandleError(parentZoneDelegate, currentZone, targetZone, error) {\n        if (this._delegateSpec && this._delegateSpec.onHandleError) {\n            return this._delegateSpec.onHandleError(parentZoneDelegate, currentZone, targetZone, error);\n        }\n        else {\n            return parentZoneDelegate.handleError(targetZone, error);\n        }\n    }\n    onScheduleTask(parentZoneDelegate, currentZone, targetZone, task) {\n        if (task.type !== 'eventTask') {\n            this.tasks.push(task);\n        }\n        if (this._delegateSpec && this._delegateSpec.onScheduleTask) {\n            return this._delegateSpec.onScheduleTask(parentZoneDelegate, currentZone, targetZone, task);\n        }\n        else {\n            return parentZoneDelegate.scheduleTask(targetZone, task);\n        }\n    }\n    onInvokeTask(parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs) {\n        if (task.type !== 'eventTask') {\n            this.removeFromTasks(task);\n        }\n        this.tryTriggerHasTask(parentZoneDelegate, currentZone, targetZone);\n        if (this._delegateSpec && this._delegateSpec.onInvokeTask) {\n            return this._delegateSpec.onInvokeTask(parentZoneDelegate, currentZone, targetZone, task, applyThis, applyArgs);\n        }\n        else {\n            return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);\n        }\n    }\n    onCancelTask(parentZoneDelegate, currentZone, targetZone, task) {\n        if (task.type !== 'eventTask') {\n            this.removeFromTasks(task);\n        }\n        this.tryTriggerHasTask(parentZoneDelegate, currentZone, targetZone);\n        if (this._delegateSpec && this._delegateSpec.onCancelTask) {\n            return this._delegateSpec.onCancelTask(parentZoneDelegate, currentZone, targetZone, task);\n        }\n        else {\n            return parentZoneDelegate.cancelTask(targetZone, task);\n        }\n    }\n    onHasTask(delegate, current, target, hasTaskState) {\n        this.lastTaskState = hasTaskState;\n        if (this._delegateSpec && this._delegateSpec.onHasTask) {\n            this._delegateSpec.onHasTask(delegate, current, target, hasTaskState);\n        }\n        else {\n            delegate.hasTask(target, hasTaskState);\n        }\n    }\n}\n// Export the class so that new instances can be created with proper\n// constructor params.\nZone['ProxyZoneSpec'] = ProxyZoneSpec;\n\nclass SyncTestZoneSpec {\n    constructor(namePrefix) {\n        this.runZone = Zone.current;\n        this.name = 'syncTestZone for ' + namePrefix;\n    }\n    onScheduleTask(delegate, current, target, task) {\n        switch (task.type) {\n            case 'microTask':\n            case 'macroTask':\n                throw new Error(`Cannot call ${task.source} from within a sync test (${this.name}).`);\n            case 'eventTask':\n                task = delegate.scheduleTask(target, task);\n                break;\n        }\n        return task;\n    }\n}\n// Export the class so that new instances can be created with proper\n// constructor params.\nZone['SyncTestZoneSpec'] = SyncTestZoneSpec;\n\n/// <reference types=\"jasmine\"/>\nZone.__load_patch('jasmine', (global, Zone, api) => {\n    const __extends = function (d, b) {\n        for (const p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p];\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());\n    };\n    // Patch jasmine's describe/it/beforeEach/afterEach functions so test code always runs\n    // in a testZone (ProxyZone). (See: angular/zone.js#91 & angular/angular#10503)\n    if (!Zone)\n        throw new Error('Missing: zone.js');\n    if (typeof jest !== 'undefined') {\n        // return if jasmine is a light implementation inside jest\n        // in this case, we are running inside jest not jasmine\n        return;\n    }\n    if (typeof jasmine == 'undefined' || jasmine['__zone_patch__']) {\n        return;\n    }\n    jasmine['__zone_patch__'] = true;\n    const SyncTestZoneSpec = Zone['SyncTestZoneSpec'];\n    const ProxyZoneSpec = Zone['ProxyZoneSpec'];\n    if (!SyncTestZoneSpec)\n        throw new Error('Missing: SyncTestZoneSpec');\n    if (!ProxyZoneSpec)\n        throw new Error('Missing: ProxyZoneSpec');\n    const ambientZone = Zone.current;\n    const symbol = Zone.__symbol__;\n    // whether patch jasmine clock when in fakeAsync\n    const disablePatchingJasmineClock = global[symbol('fakeAsyncDisablePatchingClock')] === true;\n    // the original variable name fakeAsyncPatchLock is not accurate, so the name will be\n    // fakeAsyncAutoFakeAsyncWhenClockPatched and if this enablePatchingJasmineClock is false, we also\n    // automatically disable the auto jump into fakeAsync feature\n    const enableAutoFakeAsyncWhenClockPatched = !disablePatchingJasmineClock &&\n        ((global[symbol('fakeAsyncPatchLock')] === true) ||\n            (global[symbol('fakeAsyncAutoFakeAsyncWhenClockPatched')] === true));\n    const ignoreUnhandledRejection = global[symbol('ignoreUnhandledRejection')] === true;\n    if (!ignoreUnhandledRejection) {\n        const globalErrors = jasmine.GlobalErrors;\n        if (globalErrors && !jasmine[symbol('GlobalErrors')]) {\n            jasmine[symbol('GlobalErrors')] = globalErrors;\n            jasmine.GlobalErrors = function () {\n                const instance = new globalErrors();\n                const originalInstall = instance.install;\n                if (originalInstall && !instance[symbol('install')]) {\n                    instance[symbol('install')] = originalInstall;\n                    instance.install = function () {\n                        const isNode = typeof process !== 'undefined' && !!process.on;\n                        // Note: Jasmine checks internally if `process` and `process.on` is defined. Otherwise,\n                        // it installs the browser rejection handler through the `global.addEventListener`.\n                        // This code may be run in the browser environment where `process` is not defined, and\n                        // this will lead to a runtime exception since Webpack 5 removed automatic Node.js\n                        // polyfills. Note, that events are named differently, it's `unhandledRejection` in\n                        // Node.js and `unhandledrejection` in the browser.\n                        const originalHandlers = isNode ? process.listeners('unhandledRejection') :\n                            global.eventListeners('unhandledrejection');\n                        const result = originalInstall.apply(this, arguments);\n                        isNode ? process.removeAllListeners('unhandledRejection') :\n                            global.removeAllListeners('unhandledrejection');\n                        if (originalHandlers) {\n                            originalHandlers.forEach(handler => {\n                                if (isNode) {\n                                    process.on('unhandledRejection', handler);\n                                }\n                                else {\n                                    global.addEventListener('unhandledrejection', handler);\n                                }\n                            });\n                        }\n                        return result;\n                    };\n                }\n                return instance;\n            };\n        }\n    }\n    // Monkey patch all of the jasmine DSL so that each function runs in appropriate zone.\n    const jasmineEnv = jasmine.getEnv();\n    ['describe', 'xdescribe', 'fdescribe'].forEach(methodName => {\n        let originalJasmineFn = jasmineEnv[methodName];\n        jasmineEnv[methodName] = function (description, specDefinitions) {\n            return originalJasmineFn.call(this, description, wrapDescribeInZone(description, specDefinitions));\n        };\n    });\n    ['it', 'xit', 'fit'].forEach(methodName => {\n        let originalJasmineFn = jasmineEnv[methodName];\n        jasmineEnv[symbol(methodName)] = originalJasmineFn;\n        jasmineEnv[methodName] = function (description, specDefinitions, timeout) {\n            arguments[1] = wrapTestInZone(specDefinitions);\n            return originalJasmineFn.apply(this, arguments);\n        };\n    });\n    ['beforeEach', 'afterEach', 'beforeAll', 'afterAll'].forEach(methodName => {\n        let originalJasmineFn = jasmineEnv[methodName];\n        jasmineEnv[symbol(methodName)] = originalJasmineFn;\n        jasmineEnv[methodName] = function (specDefinitions, timeout) {\n            arguments[0] = wrapTestInZone(specDefinitions);\n            return originalJasmineFn.apply(this, arguments);\n        };\n    });\n    if (!disablePatchingJasmineClock) {\n        // need to patch jasmine.clock().mockDate and jasmine.clock().tick() so\n        // they can work properly in FakeAsyncTest\n        const originalClockFn = (jasmine[symbol('clock')] = jasmine['clock']);\n        jasmine['clock'] = function () {\n            const clock = originalClockFn.apply(this, arguments);\n            if (!clock[symbol('patched')]) {\n                clock[symbol('patched')] = symbol('patched');\n                const originalTick = (clock[symbol('tick')] = clock.tick);\n                clock.tick = function () {\n                    const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                    if (fakeAsyncZoneSpec) {\n                        return fakeAsyncZoneSpec.tick.apply(fakeAsyncZoneSpec, arguments);\n                    }\n                    return originalTick.apply(this, arguments);\n                };\n                const originalMockDate = (clock[symbol('mockDate')] = clock.mockDate);\n                clock.mockDate = function () {\n                    const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                    if (fakeAsyncZoneSpec) {\n                        const dateTime = arguments.length > 0 ? arguments[0] : new Date();\n                        return fakeAsyncZoneSpec.setFakeBaseSystemTime.apply(fakeAsyncZoneSpec, dateTime && typeof dateTime.getTime === 'function' ? [dateTime.getTime()] :\n                            arguments);\n                    }\n                    return originalMockDate.apply(this, arguments);\n                };\n                // for auto go into fakeAsync feature, we need the flag to enable it\n                if (enableAutoFakeAsyncWhenClockPatched) {\n                    ['install', 'uninstall'].forEach(methodName => {\n                        const originalClockFn = (clock[symbol(methodName)] = clock[methodName]);\n                        clock[methodName] = function () {\n                            const FakeAsyncTestZoneSpec = Zone['FakeAsyncTestZoneSpec'];\n                            if (FakeAsyncTestZoneSpec) {\n                                jasmine[symbol('clockInstalled')] = 'install' === methodName;\n                                return;\n                            }\n                            return originalClockFn.apply(this, arguments);\n                        };\n                    });\n                }\n            }\n            return clock;\n        };\n    }\n    // monkey patch createSpyObj to make properties enumerable to true\n    if (!jasmine[Zone.__symbol__('createSpyObj')]) {\n        const originalCreateSpyObj = jasmine.createSpyObj;\n        jasmine[Zone.__symbol__('createSpyObj')] = originalCreateSpyObj;\n        jasmine.createSpyObj = function () {\n            const args = Array.prototype.slice.call(arguments);\n            const propertyNames = args.length >= 3 ? args[2] : null;\n            let spyObj;\n            if (propertyNames) {\n                const defineProperty = Object.defineProperty;\n                Object.defineProperty = function (obj, p, attributes) {\n                    return defineProperty.call(this, obj, p, { ...attributes, configurable: true, enumerable: true });\n                };\n                try {\n                    spyObj = originalCreateSpyObj.apply(this, args);\n                }\n                finally {\n                    Object.defineProperty = defineProperty;\n                }\n            }\n            else {\n                spyObj = originalCreateSpyObj.apply(this, args);\n            }\n            return spyObj;\n        };\n    }\n    /**\n     * Gets a function wrapping the body of a Jasmine `describe` block to execute in a\n     * synchronous-only zone.\n     */\n    function wrapDescribeInZone(description, describeBody) {\n        return function () {\n            // Create a synchronous-only zone in which to run `describe` blocks in order to raise an\n            // error if any asynchronous operations are attempted inside of a `describe`.\n            const syncZone = ambientZone.fork(new SyncTestZoneSpec(`jasmine.describe#${description}`));\n            return syncZone.run(describeBody, this, arguments);\n        };\n    }\n    function runInTestZone(testBody, applyThis, queueRunner, done) {\n        const isClockInstalled = !!jasmine[symbol('clockInstalled')];\n        queueRunner.testProxyZoneSpec;\n        const testProxyZone = queueRunner.testProxyZone;\n        if (isClockInstalled && enableAutoFakeAsyncWhenClockPatched) {\n            // auto run a fakeAsync\n            const fakeAsyncModule = Zone[Zone.__symbol__('fakeAsyncTest')];\n            if (fakeAsyncModule && typeof fakeAsyncModule.fakeAsync === 'function') {\n                testBody = fakeAsyncModule.fakeAsync(testBody);\n            }\n        }\n        if (done) {\n            return testProxyZone.run(testBody, applyThis, [done]);\n        }\n        else {\n            return testProxyZone.run(testBody, applyThis);\n        }\n    }\n    /**\n     * Gets a function wrapping the body of a Jasmine `it/beforeEach/afterEach` block to\n     * execute in a ProxyZone zone.\n     * This will run in `testProxyZone`. The `testProxyZone` will be reset by the `ZoneQueueRunner`\n     */\n    function wrapTestInZone(testBody) {\n        // The `done` callback is only passed through if the function expects at least one argument.\n        // Note we have to make a function with correct number of arguments, otherwise jasmine will\n        // think that all functions are sync or async.\n        return (testBody && (testBody.length ? function (done) {\n            return runInTestZone(testBody, this, this.queueRunner, done);\n        } : function () {\n            return runInTestZone(testBody, this, this.queueRunner);\n        }));\n    }\n    const QueueRunner = jasmine.QueueRunner;\n    jasmine.QueueRunner = (function (_super) {\n        __extends(ZoneQueueRunner, _super);\n        function ZoneQueueRunner(attrs) {\n            if (attrs.onComplete) {\n                attrs.onComplete = (fn => () => {\n                    // All functions are done, clear the test zone.\n                    this.testProxyZone = null;\n                    this.testProxyZoneSpec = null;\n                    ambientZone.scheduleMicroTask('jasmine.onComplete', fn);\n                })(attrs.onComplete);\n            }\n            const nativeSetTimeout = global[Zone.__symbol__('setTimeout')];\n            const nativeClearTimeout = global[Zone.__symbol__('clearTimeout')];\n            if (nativeSetTimeout) {\n                // should run setTimeout inside jasmine outside of zone\n                attrs.timeout = {\n                    setTimeout: nativeSetTimeout ? nativeSetTimeout : global.setTimeout,\n                    clearTimeout: nativeClearTimeout ? nativeClearTimeout : global.clearTimeout\n                };\n            }\n            // create a userContext to hold the queueRunner itself\n            // so we can access the testProxy in it/xit/beforeEach ...\n            if (jasmine.UserContext) {\n                if (!attrs.userContext) {\n                    attrs.userContext = new jasmine.UserContext();\n                }\n                attrs.userContext.queueRunner = this;\n            }\n            else {\n                if (!attrs.userContext) {\n                    attrs.userContext = {};\n                }\n                attrs.userContext.queueRunner = this;\n            }\n            // patch attrs.onException\n            const onException = attrs.onException;\n            attrs.onException = function (error) {\n                if (error &&\n                    error.message ===\n                        'Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.') {\n                    // jasmine timeout, we can make the error message more\n                    // reasonable to tell what tasks are pending\n                    const proxyZoneSpec = this && this.testProxyZoneSpec;\n                    if (proxyZoneSpec) {\n                        const pendingTasksInfo = proxyZoneSpec.getAndClearPendingTasksInfo();\n                        try {\n                            // try catch here in case error.message is not writable\n                            error.message += pendingTasksInfo;\n                        }\n                        catch (err) {\n                        }\n                    }\n                }\n                if (onException) {\n                    onException.call(this, error);\n                }\n            };\n            _super.call(this, attrs);\n        }\n        ZoneQueueRunner.prototype.execute = function () {\n            let zone = Zone.current;\n            let isChildOfAmbientZone = false;\n            while (zone) {\n                if (zone === ambientZone) {\n                    isChildOfAmbientZone = true;\n                    break;\n                }\n                zone = zone.parent;\n            }\n            if (!isChildOfAmbientZone)\n                throw new Error('Unexpected Zone: ' + Zone.current.name);\n            // This is the zone which will be used for running individual tests.\n            // It will be a proxy zone, so that the tests function can retroactively install\n            // different zones.\n            // Example:\n            //   - In beforeEach() do childZone = Zone.current.fork(...);\n            //   - In it() try to do fakeAsync(). The issue is that because the beforeEach forked the\n            //     zone outside of fakeAsync it will be able to escape the fakeAsync rules.\n            //   - Because ProxyZone is parent fo `childZone` fakeAsync can retroactively add\n            //     fakeAsync behavior to the childZone.\n            this.testProxyZoneSpec = new ProxyZoneSpec();\n            this.testProxyZone = ambientZone.fork(this.testProxyZoneSpec);\n            if (!Zone.currentTask) {\n                // if we are not running in a task then if someone would register a\n                // element.addEventListener and then calling element.click() the\n                // addEventListener callback would think that it is the top most task and would\n                // drain the microtask queue on element.click() which would be incorrect.\n                // For this reason we always force a task when running jasmine tests.\n                Zone.current.scheduleMicroTask('jasmine.execute().forceTask', () => QueueRunner.prototype.execute.call(this));\n            }\n            else {\n                _super.prototype.execute.call(this);\n            }\n        };\n        return ZoneQueueRunner;\n    })(QueueRunner);\n});\n\nZone.__load_patch('jest', (context, Zone, api) => {\n    if (typeof jest === 'undefined' || jest['__zone_patch__']) {\n        return;\n    }\n    // From jest 29 and jest-preset-angular v13, the module transform logic\n    // changed, and now jest-preset-angular use the use the tsconfig target\n    // other than the hardcoded one, https://github.com/thymikee/jest-preset-angular/issues/2010\n    // But jest-angular-preset doesn't introduce the @babel/plugin-transform-async-to-generator\n    // which is needed by angular since `async/await` still need to be transformed\n    // to promise for ES2017+ target.\n    // So for now, we disable to output the uncaught error console log for a temp solution,\n    // until jest-preset-angular find a proper solution.\n    Zone[api.symbol('ignoreConsoleErrorUncaughtError')] = true;\n    jest['__zone_patch__'] = true;\n    const ProxyZoneSpec = Zone['ProxyZoneSpec'];\n    const SyncTestZoneSpec = Zone['SyncTestZoneSpec'];\n    if (!ProxyZoneSpec) {\n        throw new Error('Missing ProxyZoneSpec');\n    }\n    const rootZone = Zone.current;\n    const syncZone = rootZone.fork(new SyncTestZoneSpec('jest.describe'));\n    const proxyZoneSpec = new ProxyZoneSpec();\n    const proxyZone = rootZone.fork(proxyZoneSpec);\n    function wrapDescribeFactoryInZone(originalJestFn) {\n        return function (...tableArgs) {\n            const originalDescribeFn = originalJestFn.apply(this, tableArgs);\n            return function (...args) {\n                args[1] = wrapDescribeInZone(args[1]);\n                return originalDescribeFn.apply(this, args);\n            };\n        };\n    }\n    function wrapTestFactoryInZone(originalJestFn) {\n        return function (...tableArgs) {\n            return function (...args) {\n                args[1] = wrapTestInZone(args[1]);\n                return originalJestFn.apply(this, tableArgs).apply(this, args);\n            };\n        };\n    }\n    /**\n     * Gets a function wrapping the body of a jest `describe` block to execute in a\n     * synchronous-only zone.\n     */\n    function wrapDescribeInZone(describeBody) {\n        return function (...args) {\n            return syncZone.run(describeBody, this, args);\n        };\n    }\n    /**\n     * Gets a function wrapping the body of a jest `it/beforeEach/afterEach` block to\n     * execute in a ProxyZone zone.\n     * This will run in the `proxyZone`.\n     */\n    function wrapTestInZone(testBody, isTestFunc = false) {\n        if (typeof testBody !== 'function') {\n            return testBody;\n        }\n        const wrappedFunc = function () {\n            if (Zone[api.symbol('useFakeTimersCalled')] === true && testBody &&\n                !testBody.isFakeAsync) {\n                // jest.useFakeTimers is called, run into fakeAsyncTest automatically.\n                const fakeAsyncModule = Zone[Zone.__symbol__('fakeAsyncTest')];\n                if (fakeAsyncModule && typeof fakeAsyncModule.fakeAsync === 'function') {\n                    testBody = fakeAsyncModule.fakeAsync(testBody);\n                }\n            }\n            proxyZoneSpec.isTestFunc = isTestFunc;\n            return proxyZone.run(testBody, null, arguments);\n        };\n        // Update the length of wrappedFunc to be the same as the length of the testBody\n        // So jest core can handle whether the test function has `done()` or not correctly\n        Object.defineProperty(wrappedFunc, 'length', { configurable: true, writable: true, enumerable: false });\n        wrappedFunc.length = testBody.length;\n        return wrappedFunc;\n    }\n    ['describe', 'xdescribe', 'fdescribe'].forEach(methodName => {\n        let originalJestFn = context[methodName];\n        if (context[Zone.__symbol__(methodName)]) {\n            return;\n        }\n        context[Zone.__symbol__(methodName)] = originalJestFn;\n        context[methodName] = function (...args) {\n            args[1] = wrapDescribeInZone(args[1]);\n            return originalJestFn.apply(this, args);\n        };\n        context[methodName].each = wrapDescribeFactoryInZone(originalJestFn.each);\n    });\n    context.describe.only = context.fdescribe;\n    context.describe.skip = context.xdescribe;\n    ['it', 'xit', 'fit', 'test', 'xtest'].forEach(methodName => {\n        let originalJestFn = context[methodName];\n        if (context[Zone.__symbol__(methodName)]) {\n            return;\n        }\n        context[Zone.__symbol__(methodName)] = originalJestFn;\n        context[methodName] = function (...args) {\n            args[1] = wrapTestInZone(args[1], true);\n            return originalJestFn.apply(this, args);\n        };\n        context[methodName].each = wrapTestFactoryInZone(originalJestFn.each);\n        context[methodName].todo = originalJestFn.todo;\n    });\n    context.it.only = context.fit;\n    context.it.skip = context.xit;\n    context.test.only = context.fit;\n    context.test.skip = context.xit;\n    ['beforeEach', 'afterEach', 'beforeAll', 'afterAll'].forEach(methodName => {\n        let originalJestFn = context[methodName];\n        if (context[Zone.__symbol__(methodName)]) {\n            return;\n        }\n        context[Zone.__symbol__(methodName)] = originalJestFn;\n        context[methodName] = function (...args) {\n            args[0] = wrapTestInZone(args[0]);\n            return originalJestFn.apply(this, args);\n        };\n    });\n    Zone.patchJestObject = function patchJestObject(Timer, isModern = false) {\n        // check whether currently the test is inside fakeAsync()\n        function isPatchingFakeTimer() {\n            const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n            return !!fakeAsyncZoneSpec;\n        }\n        // check whether the current function is inside `test/it` or other methods\n        // such as `describe/beforeEach`\n        function isInTestFunc() {\n            const proxyZoneSpec = Zone.current.get('ProxyZoneSpec');\n            return proxyZoneSpec && proxyZoneSpec.isTestFunc;\n        }\n        if (Timer[api.symbol('fakeTimers')]) {\n            return;\n        }\n        Timer[api.symbol('fakeTimers')] = true;\n        // patch jest fakeTimer internal method to make sure no console.warn print out\n        api.patchMethod(Timer, '_checkFakeTimers', delegate => {\n            return function (self, args) {\n                if (isPatchingFakeTimer()) {\n                    return true;\n                }\n                else {\n                    return delegate.apply(self, args);\n                }\n            };\n        });\n        // patch useFakeTimers(), set useFakeTimersCalled flag, and make test auto run into fakeAsync\n        api.patchMethod(Timer, 'useFakeTimers', delegate => {\n            return function (self, args) {\n                Zone[api.symbol('useFakeTimersCalled')] = true;\n                if (isModern || isInTestFunc()) {\n                    return delegate.apply(self, args);\n                }\n                return self;\n            };\n        });\n        // patch useRealTimers(), unset useFakeTimers flag\n        api.patchMethod(Timer, 'useRealTimers', delegate => {\n            return function (self, args) {\n                Zone[api.symbol('useFakeTimersCalled')] = false;\n                if (isModern || isInTestFunc()) {\n                    return delegate.apply(self, args);\n                }\n                return self;\n            };\n        });\n        // patch setSystemTime(), call setCurrentRealTime() in the fakeAsyncTest\n        api.patchMethod(Timer, 'setSystemTime', delegate => {\n            return function (self, args) {\n                const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                if (fakeAsyncZoneSpec && isPatchingFakeTimer()) {\n                    fakeAsyncZoneSpec.setFakeBaseSystemTime(args[0]);\n                }\n                else {\n                    return delegate.apply(self, args);\n                }\n            };\n        });\n        // patch getSystemTime(), call getCurrentRealTime() in the fakeAsyncTest\n        api.patchMethod(Timer, 'getRealSystemTime', delegate => {\n            return function (self, args) {\n                const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                if (fakeAsyncZoneSpec && isPatchingFakeTimer()) {\n                    return fakeAsyncZoneSpec.getRealSystemTime();\n                }\n                else {\n                    return delegate.apply(self, args);\n                }\n            };\n        });\n        // patch runAllTicks(), run all microTasks inside fakeAsync\n        api.patchMethod(Timer, 'runAllTicks', delegate => {\n            return function (self, args) {\n                const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                if (fakeAsyncZoneSpec) {\n                    fakeAsyncZoneSpec.flushMicrotasks();\n                }\n                else {\n                    return delegate.apply(self, args);\n                }\n            };\n        });\n        // patch runAllTimers(), run all macroTasks inside fakeAsync\n        api.patchMethod(Timer, 'runAllTimers', delegate => {\n            return function (self, args) {\n                const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                if (fakeAsyncZoneSpec) {\n                    fakeAsyncZoneSpec.flush(100, true);\n                }\n                else {\n                    return delegate.apply(self, args);\n                }\n            };\n        });\n        // patch advanceTimersByTime(), call tick() in the fakeAsyncTest\n        api.patchMethod(Timer, 'advanceTimersByTime', delegate => {\n            return function (self, args) {\n                const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                if (fakeAsyncZoneSpec) {\n                    fakeAsyncZoneSpec.tick(args[0]);\n                }\n                else {\n                    return delegate.apply(self, args);\n                }\n            };\n        });\n        // patch runOnlyPendingTimers(), call flushOnlyPendingTimers() in the fakeAsyncTest\n        api.patchMethod(Timer, 'runOnlyPendingTimers', delegate => {\n            return function (self, args) {\n                const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                if (fakeAsyncZoneSpec) {\n                    fakeAsyncZoneSpec.flushOnlyPendingTimers();\n                }\n                else {\n                    return delegate.apply(self, args);\n                }\n            };\n        });\n        // patch advanceTimersToNextTimer(), call tickToNext() in the fakeAsyncTest\n        api.patchMethod(Timer, 'advanceTimersToNextTimer', delegate => {\n            return function (self, args) {\n                const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                if (fakeAsyncZoneSpec) {\n                    fakeAsyncZoneSpec.tickToNext(args[0]);\n                }\n                else {\n                    return delegate.apply(self, args);\n                }\n            };\n        });\n        // patch clearAllTimers(), call removeAllTimers() in the fakeAsyncTest\n        api.patchMethod(Timer, 'clearAllTimers', delegate => {\n            return function (self, args) {\n                const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                if (fakeAsyncZoneSpec) {\n                    fakeAsyncZoneSpec.removeAllTimers();\n                }\n                else {\n                    return delegate.apply(self, args);\n                }\n            };\n        });\n        // patch getTimerCount(), call getTimerCount() in the fakeAsyncTest\n        api.patchMethod(Timer, 'getTimerCount', delegate => {\n            return function (self, args) {\n                const fakeAsyncZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n                if (fakeAsyncZoneSpec) {\n                    return fakeAsyncZoneSpec.getTimerCount();\n                }\n                else {\n                    return delegate.apply(self, args);\n                }\n            };\n        });\n    };\n});\n\nZone.__load_patch('mocha', (global, Zone) => {\n    const Mocha = global.Mocha;\n    if (typeof Mocha === 'undefined') {\n        // return if Mocha is not available, because now zone-testing\n        // will load mocha patch with jasmine/jest patch\n        return;\n    }\n    if (typeof Zone === 'undefined') {\n        throw new Error('Missing Zone.js');\n    }\n    const ProxyZoneSpec = Zone['ProxyZoneSpec'];\n    const SyncTestZoneSpec = Zone['SyncTestZoneSpec'];\n    if (!ProxyZoneSpec) {\n        throw new Error('Missing ProxyZoneSpec');\n    }\n    if (Mocha['__zone_patch__']) {\n        throw new Error('\"Mocha\" has already been patched with \"Zone\".');\n    }\n    Mocha['__zone_patch__'] = true;\n    const rootZone = Zone.current;\n    const syncZone = rootZone.fork(new SyncTestZoneSpec('Mocha.describe'));\n    let testZone = null;\n    const suiteZone = rootZone.fork(new ProxyZoneSpec());\n    const mochaOriginal = {\n        after: global.after,\n        afterEach: global.afterEach,\n        before: global.before,\n        beforeEach: global.beforeEach,\n        describe: global.describe,\n        it: global.it\n    };\n    function modifyArguments(args, syncTest, asyncTest) {\n        for (let i = 0; i < args.length; i++) {\n            let arg = args[i];\n            if (typeof arg === 'function') {\n                // The `done` callback is only passed through if the function expects at\n                // least one argument.\n                // Note we have to make a function with correct number of arguments,\n                // otherwise mocha will\n                // think that all functions are sync or async.\n                args[i] = (arg.length === 0) ? syncTest(arg) : asyncTest(arg);\n                // Mocha uses toString to view the test body in the result list, make sure we return the\n                // correct function body\n                args[i].toString = function () {\n                    return arg.toString();\n                };\n            }\n        }\n        return args;\n    }\n    function wrapDescribeInZone(args) {\n        const syncTest = function (fn) {\n            return function () {\n                return syncZone.run(fn, this, arguments);\n            };\n        };\n        return modifyArguments(args, syncTest);\n    }\n    function wrapTestInZone(args) {\n        const asyncTest = function (fn) {\n            return function (done) {\n                return testZone.run(fn, this, [done]);\n            };\n        };\n        const syncTest = function (fn) {\n            return function () {\n                return testZone.run(fn, this);\n            };\n        };\n        return modifyArguments(args, syncTest, asyncTest);\n    }\n    function wrapSuiteInZone(args) {\n        const asyncTest = function (fn) {\n            return function (done) {\n                return suiteZone.run(fn, this, [done]);\n            };\n        };\n        const syncTest = function (fn) {\n            return function () {\n                return suiteZone.run(fn, this);\n            };\n        };\n        return modifyArguments(args, syncTest, asyncTest);\n    }\n    global.describe = global.suite = function () {\n        return mochaOriginal.describe.apply(this, wrapDescribeInZone(arguments));\n    };\n    global.xdescribe = global.suite.skip = global.describe.skip = function () {\n        return mochaOriginal.describe.skip.apply(this, wrapDescribeInZone(arguments));\n    };\n    global.describe.only = global.suite.only = function () {\n        return mochaOriginal.describe.only.apply(this, wrapDescribeInZone(arguments));\n    };\n    global.it = global.specify = global.test = function () {\n        return mochaOriginal.it.apply(this, wrapTestInZone(arguments));\n    };\n    global.xit = global.xspecify = global.it.skip = function () {\n        return mochaOriginal.it.skip.apply(this, wrapTestInZone(arguments));\n    };\n    global.it.only = global.test.only = function () {\n        return mochaOriginal.it.only.apply(this, wrapTestInZone(arguments));\n    };\n    global.after = global.suiteTeardown = function () {\n        return mochaOriginal.after.apply(this, wrapSuiteInZone(arguments));\n    };\n    global.afterEach = global.teardown = function () {\n        return mochaOriginal.afterEach.apply(this, wrapTestInZone(arguments));\n    };\n    global.before = global.suiteSetup = function () {\n        return mochaOriginal.before.apply(this, wrapSuiteInZone(arguments));\n    };\n    global.beforeEach = global.setup = function () {\n        return mochaOriginal.beforeEach.apply(this, wrapTestInZone(arguments));\n    };\n    ((originalRunTest, originalRun) => {\n        Mocha.Runner.prototype.runTest = function (fn) {\n            Zone.current.scheduleMicroTask('mocha.forceTask', () => {\n                originalRunTest.call(this, fn);\n            });\n        };\n        Mocha.Runner.prototype.run = function (fn) {\n            this.on('test', (e) => {\n                testZone = rootZone.fork(new ProxyZoneSpec());\n            });\n            this.on('fail', (test, err) => {\n                const proxyZoneSpec = testZone && testZone.get('ProxyZoneSpec');\n                if (proxyZoneSpec && err) {\n                    try {\n                        // try catch here in case err.message is not writable\n                        err.message += proxyZoneSpec.getAndClearPendingTasksInfo();\n                    }\n                    catch (error) {\n                    }\n                }\n            });\n            return originalRun.call(this, fn);\n        };\n    })(Mocha.Runner.prototype.runTest, Mocha.Runner.prototype.run);\n});\n\n(function (_global) {\n    class AsyncTestZoneSpec {\n        static { this.symbolParentUnresolved = Zone.__symbol__('parentUnresolved'); }\n        constructor(finishCallback, failCallback, namePrefix) {\n            this.finishCallback = finishCallback;\n            this.failCallback = failCallback;\n            this._pendingMicroTasks = false;\n            this._pendingMacroTasks = false;\n            this._alreadyErrored = false;\n            this._isSync = false;\n            this._existingFinishTimer = null;\n            this.entryFunction = null;\n            this.runZone = Zone.current;\n            this.unresolvedChainedPromiseCount = 0;\n            this.supportWaitUnresolvedChainedPromise = false;\n            this.name = 'asyncTestZone for ' + namePrefix;\n            this.properties = { 'AsyncTestZoneSpec': this };\n            this.supportWaitUnresolvedChainedPromise =\n                _global[Zone.__symbol__('supportWaitUnResolvedChainedPromise')] === true;\n        }\n        isUnresolvedChainedPromisePending() {\n            return this.unresolvedChainedPromiseCount > 0;\n        }\n        _finishCallbackIfDone() {\n            // NOTE: Technically the `onHasTask` could fire together with the initial synchronous\n            // completion in `onInvoke`. `onHasTask` might call this method when it captured e.g.\n            // microtasks in the proxy zone that now complete as part of this async zone run.\n            // Consider the following scenario:\n            //    1. A test `beforeEach` schedules a microtask in the ProxyZone.\n            //    2. An actual empty `it` spec executes in the AsyncTestZone` (using e.g. `waitForAsync`).\n            //    3. The `onInvoke` invokes `_finishCallbackIfDone` because the spec runs synchronously.\n            //    4. We wait the scheduled timeout (see below) to account for unhandled promises.\n            //    5. The microtask from (1) finishes and `onHasTask` is invoked.\n            //    --> We register a second `_finishCallbackIfDone` even though we have scheduled a timeout.\n            // If the finish timeout from below is already scheduled, terminate the existing scheduled\n            // finish invocation, avoiding calling `jasmine` `done` multiple times. *Note* that we would\n            // want to schedule a new finish callback in case the task state changes again.\n            if (this._existingFinishTimer !== null) {\n                clearTimeout(this._existingFinishTimer);\n                this._existingFinishTimer = null;\n            }\n            if (!(this._pendingMicroTasks || this._pendingMacroTasks ||\n                (this.supportWaitUnresolvedChainedPromise && this.isUnresolvedChainedPromisePending()))) {\n                // We wait until the next tick because we would like to catch unhandled promises which could\n                // cause test logic to be executed. In such cases we cannot finish with tasks pending then.\n                this.runZone.run(() => {\n                    this._existingFinishTimer = setTimeout(() => {\n                        if (!this._alreadyErrored && !(this._pendingMicroTasks || this._pendingMacroTasks)) {\n                            this.finishCallback();\n                        }\n                    }, 0);\n                });\n            }\n        }\n        patchPromiseForTest() {\n            if (!this.supportWaitUnresolvedChainedPromise) {\n                return;\n            }\n            const patchPromiseForTest = Promise[Zone.__symbol__('patchPromiseForTest')];\n            if (patchPromiseForTest) {\n                patchPromiseForTest();\n            }\n        }\n        unPatchPromiseForTest() {\n            if (!this.supportWaitUnresolvedChainedPromise) {\n                return;\n            }\n            const unPatchPromiseForTest = Promise[Zone.__symbol__('unPatchPromiseForTest')];\n            if (unPatchPromiseForTest) {\n                unPatchPromiseForTest();\n            }\n        }\n        onScheduleTask(delegate, current, target, task) {\n            if (task.type !== 'eventTask') {\n                this._isSync = false;\n            }\n            if (task.type === 'microTask' && task.data && task.data instanceof Promise) {\n                // check whether the promise is a chained promise\n                if (task.data[AsyncTestZoneSpec.symbolParentUnresolved] === true) {\n                    // chained promise is being scheduled\n                    this.unresolvedChainedPromiseCount--;\n                }\n            }\n            return delegate.scheduleTask(target, task);\n        }\n        onInvokeTask(delegate, current, target, task, applyThis, applyArgs) {\n            if (task.type !== 'eventTask') {\n                this._isSync = false;\n            }\n            return delegate.invokeTask(target, task, applyThis, applyArgs);\n        }\n        onCancelTask(delegate, current, target, task) {\n            if (task.type !== 'eventTask') {\n                this._isSync = false;\n            }\n            return delegate.cancelTask(target, task);\n        }\n        // Note - we need to use onInvoke at the moment to call finish when a test is\n        // fully synchronous. TODO(juliemr): remove this when the logic for\n        // onHasTask changes and it calls whenever the task queues are dirty.\n        // updated by(JiaLiPassion), only call finish callback when no task\n        // was scheduled/invoked/canceled.\n        onInvoke(parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {\n            if (!this.entryFunction) {\n                this.entryFunction = delegate;\n            }\n            try {\n                this._isSync = true;\n                return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);\n            }\n            finally {\n                // We need to check the delegate is the same as entryFunction or not.\n                // Consider the following case.\n                //\n                // asyncTestZone.run(() => { // Here the delegate will be the entryFunction\n                //   Zone.current.run(() => { // Here the delegate will not be the entryFunction\n                //   });\n                // });\n                //\n                // We only want to check whether there are async tasks scheduled\n                // for the entry function.\n                if (this._isSync && this.entryFunction === delegate) {\n                    this._finishCallbackIfDone();\n                }\n            }\n        }\n        onHandleError(parentZoneDelegate, currentZone, targetZone, error) {\n            // Let the parent try to handle the error.\n            const result = parentZoneDelegate.handleError(targetZone, error);\n            if (result) {\n                this.failCallback(error);\n                this._alreadyErrored = true;\n            }\n            return false;\n        }\n        onHasTask(delegate, current, target, hasTaskState) {\n            delegate.hasTask(target, hasTaskState);\n            // We should only trigger finishCallback when the target zone is the AsyncTestZone\n            // Consider the following cases.\n            //\n            // const childZone = asyncTestZone.fork({\n            //   name: 'child',\n            //   onHasTask: ...\n            // });\n            //\n            // So we have nested zones declared the onHasTask hook, in this case,\n            // the onHasTask will be triggered twice, and cause the finishCallbackIfDone()\n            // is also be invoked twice. So we need to only trigger the finishCallbackIfDone()\n            // when the current zone is the same as the target zone.\n            if (current !== target) {\n                return;\n            }\n            if (hasTaskState.change == 'microTask') {\n                this._pendingMicroTasks = hasTaskState.microTask;\n                this._finishCallbackIfDone();\n            }\n            else if (hasTaskState.change == 'macroTask') {\n                this._pendingMacroTasks = hasTaskState.macroTask;\n                this._finishCallbackIfDone();\n            }\n        }\n    }\n    // Export the class so that new instances can be created with proper\n    // constructor params.\n    Zone['AsyncTestZoneSpec'] = AsyncTestZoneSpec;\n})(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\nZone.__load_patch('asynctest', (global, Zone, api) => {\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done.\n     */\n    Zone[api.symbol('asyncTest')] = function asyncTest(fn) {\n        // If we're running using the Jasmine test framework, adapt to call the 'done'\n        // function when asynchronous activity is finished.\n        if (global.jasmine) {\n            // Not using an arrow function to preserve context passed from call site\n            return function (done) {\n                if (!done) {\n                    // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                    // fake it here and assume sync.\n                    done = function () { };\n                    done.fail = function (e) {\n                        throw e;\n                    };\n                }\n                runInTestZone(fn, this, done, (err) => {\n                    if (typeof err === 'string') {\n                        return done.fail(new Error(err));\n                    }\n                    else {\n                        done.fail(err);\n                    }\n                });\n            };\n        }\n        // Otherwise, return a promise which will resolve when asynchronous activity\n        // is finished. This will be correctly consumed by the Mocha framework with\n        // it('...', async(myFn)); or can be used in a custom framework.\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            return new Promise((finishCallback, failCallback) => {\n                runInTestZone(fn, this, finishCallback, failCallback);\n            });\n        };\n    };\n    function runInTestZone(fn, context, finishCallback, failCallback) {\n        const currentZone = Zone.current;\n        const AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n        if (AsyncTestZoneSpec === undefined) {\n            throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/plugins/async-test');\n        }\n        const ProxyZoneSpec = Zone['ProxyZoneSpec'];\n        if (!ProxyZoneSpec) {\n            throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/plugins/proxy');\n        }\n        const proxyZoneSpec = ProxyZoneSpec.get();\n        ProxyZoneSpec.assertPresent();\n        // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n        // If we do it in ProxyZone then we will get to infinite recursion.\n        const proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n        const previousDelegate = proxyZoneSpec.getDelegate();\n        proxyZone.parent.run(() => {\n            const testZoneSpec = new AsyncTestZoneSpec(() => {\n                // Need to restore the original zone.\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's\n                    // still this one. Otherwise, assume\n                    // it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                testZoneSpec.unPatchPromiseForTest();\n                currentZone.run(() => {\n                    finishCallback();\n                });\n            }, (error) => {\n                // Need to restore the original zone.\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                testZoneSpec.unPatchPromiseForTest();\n                currentZone.run(() => {\n                    failCallback(error);\n                });\n            }, 'test');\n            proxyZoneSpec.setDelegate(testZoneSpec);\n            testZoneSpec.patchPromiseForTest();\n        });\n        return Zone.current.runGuarded(fn, context);\n    }\n});\n\n(function (global) {\n    const OriginalDate = global.Date;\n    // Since when we compile this file to `es2015`, and if we define\n    // this `FakeDate` as `class FakeDate`, and then set `FakeDate.prototype`\n    // there will be an error which is `Cannot assign to read only property 'prototype'`\n    // so we need to use function implementation here.\n    function FakeDate() {\n        if (arguments.length === 0) {\n            const d = new OriginalDate();\n            d.setTime(FakeDate.now());\n            return d;\n        }\n        else {\n            const args = Array.prototype.slice.call(arguments);\n            return new OriginalDate(...args);\n        }\n    }\n    FakeDate.now = function () {\n        const fakeAsyncTestZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n        if (fakeAsyncTestZoneSpec) {\n            return fakeAsyncTestZoneSpec.getFakeSystemTime();\n        }\n        return OriginalDate.now.apply(this, arguments);\n    };\n    FakeDate.UTC = OriginalDate.UTC;\n    FakeDate.parse = OriginalDate.parse;\n    // keep a reference for zone patched timer function\n    const timers = {\n        setTimeout: global.setTimeout,\n        setInterval: global.setInterval,\n        clearTimeout: global.clearTimeout,\n        clearInterval: global.clearInterval\n    };\n    class Scheduler {\n        // Next scheduler id.\n        static { this.nextId = 1; }\n        constructor() {\n            // Scheduler queue with the tuple of end time and callback function - sorted by end time.\n            this._schedulerQueue = [];\n            // Current simulated time in millis.\n            this._currentTickTime = 0;\n            // Current fake system base time in millis.\n            this._currentFakeBaseSystemTime = OriginalDate.now();\n            // track requeuePeriodicTimer\n            this._currentTickRequeuePeriodicEntries = [];\n        }\n        getCurrentTickTime() {\n            return this._currentTickTime;\n        }\n        getFakeSystemTime() {\n            return this._currentFakeBaseSystemTime + this._currentTickTime;\n        }\n        setFakeBaseSystemTime(fakeBaseSystemTime) {\n            this._currentFakeBaseSystemTime = fakeBaseSystemTime;\n        }\n        getRealSystemTime() {\n            return OriginalDate.now();\n        }\n        scheduleFunction(cb, delay, options) {\n            options = {\n                ...{\n                    args: [],\n                    isPeriodic: false,\n                    isRequestAnimationFrame: false,\n                    id: -1,\n                    isRequeuePeriodic: false\n                },\n                ...options\n            };\n            let currentId = options.id < 0 ? Scheduler.nextId++ : options.id;\n            let endTime = this._currentTickTime + delay;\n            // Insert so that scheduler queue remains sorted by end time.\n            let newEntry = {\n                endTime: endTime,\n                id: currentId,\n                func: cb,\n                args: options.args,\n                delay: delay,\n                isPeriodic: options.isPeriodic,\n                isRequestAnimationFrame: options.isRequestAnimationFrame\n            };\n            if (options.isRequeuePeriodic) {\n                this._currentTickRequeuePeriodicEntries.push(newEntry);\n            }\n            let i = 0;\n            for (; i < this._schedulerQueue.length; i++) {\n                let currentEntry = this._schedulerQueue[i];\n                if (newEntry.endTime < currentEntry.endTime) {\n                    break;\n                }\n            }\n            this._schedulerQueue.splice(i, 0, newEntry);\n            return currentId;\n        }\n        removeScheduledFunctionWithId(id) {\n            for (let i = 0; i < this._schedulerQueue.length; i++) {\n                if (this._schedulerQueue[i].id == id) {\n                    this._schedulerQueue.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        removeAll() {\n            this._schedulerQueue = [];\n        }\n        getTimerCount() {\n            return this._schedulerQueue.length;\n        }\n        tickToNext(step = 1, doTick, tickOptions) {\n            if (this._schedulerQueue.length < step) {\n                return;\n            }\n            // Find the last task currently queued in the scheduler queue and tick\n            // till that time.\n            const startTime = this._currentTickTime;\n            const targetTask = this._schedulerQueue[step - 1];\n            this.tick(targetTask.endTime - startTime, doTick, tickOptions);\n        }\n        tick(millis = 0, doTick, tickOptions) {\n            let finalTime = this._currentTickTime + millis;\n            let lastCurrentTime = 0;\n            tickOptions = Object.assign({ processNewMacroTasksSynchronously: true }, tickOptions);\n            // we need to copy the schedulerQueue so nested timeout\n            // will not be wrongly called in the current tick\n            // https://github.com/angular/angular/issues/33799\n            const schedulerQueue = tickOptions.processNewMacroTasksSynchronously ?\n                this._schedulerQueue :\n                this._schedulerQueue.slice();\n            if (schedulerQueue.length === 0 && doTick) {\n                doTick(millis);\n                return;\n            }\n            while (schedulerQueue.length > 0) {\n                // clear requeueEntries before each loop\n                this._currentTickRequeuePeriodicEntries = [];\n                let current = schedulerQueue[0];\n                if (finalTime < current.endTime) {\n                    // Done processing the queue since it's sorted by endTime.\n                    break;\n                }\n                else {\n                    // Time to run scheduled function. Remove it from the head of queue.\n                    let current = schedulerQueue.shift();\n                    if (!tickOptions.processNewMacroTasksSynchronously) {\n                        const idx = this._schedulerQueue.indexOf(current);\n                        if (idx >= 0) {\n                            this._schedulerQueue.splice(idx, 1);\n                        }\n                    }\n                    lastCurrentTime = this._currentTickTime;\n                    this._currentTickTime = current.endTime;\n                    if (doTick) {\n                        doTick(this._currentTickTime - lastCurrentTime);\n                    }\n                    let retval = current.func.apply(global, current.isRequestAnimationFrame ? [this._currentTickTime] : current.args);\n                    if (!retval) {\n                        // Uncaught exception in the current scheduled function. Stop processing the queue.\n                        break;\n                    }\n                    // check is there any requeue periodic entry is added in\n                    // current loop, if there is, we need to add to current loop\n                    if (!tickOptions.processNewMacroTasksSynchronously) {\n                        this._currentTickRequeuePeriodicEntries.forEach(newEntry => {\n                            let i = 0;\n                            for (; i < schedulerQueue.length; i++) {\n                                const currentEntry = schedulerQueue[i];\n                                if (newEntry.endTime < currentEntry.endTime) {\n                                    break;\n                                }\n                            }\n                            schedulerQueue.splice(i, 0, newEntry);\n                        });\n                    }\n                }\n            }\n            lastCurrentTime = this._currentTickTime;\n            this._currentTickTime = finalTime;\n            if (doTick) {\n                doTick(this._currentTickTime - lastCurrentTime);\n            }\n        }\n        flushOnlyPendingTimers(doTick) {\n            if (this._schedulerQueue.length === 0) {\n                return 0;\n            }\n            // Find the last task currently queued in the scheduler queue and tick\n            // till that time.\n            const startTime = this._currentTickTime;\n            const lastTask = this._schedulerQueue[this._schedulerQueue.length - 1];\n            this.tick(lastTask.endTime - startTime, doTick, { processNewMacroTasksSynchronously: false });\n            return this._currentTickTime - startTime;\n        }\n        flush(limit = 20, flushPeriodic = false, doTick) {\n            if (flushPeriodic) {\n                return this.flushPeriodic(doTick);\n            }\n            else {\n                return this.flushNonPeriodic(limit, doTick);\n            }\n        }\n        flushPeriodic(doTick) {\n            if (this._schedulerQueue.length === 0) {\n                return 0;\n            }\n            // Find the last task currently queued in the scheduler queue and tick\n            // till that time.\n            const startTime = this._currentTickTime;\n            const lastTask = this._schedulerQueue[this._schedulerQueue.length - 1];\n            this.tick(lastTask.endTime - startTime, doTick);\n            return this._currentTickTime - startTime;\n        }\n        flushNonPeriodic(limit, doTick) {\n            const startTime = this._currentTickTime;\n            let lastCurrentTime = 0;\n            let count = 0;\n            while (this._schedulerQueue.length > 0) {\n                count++;\n                if (count > limit) {\n                    throw new Error('flush failed after reaching the limit of ' + limit +\n                        ' tasks. Does your code use a polling timeout?');\n                }\n                // flush only non-periodic timers.\n                // If the only remaining tasks are periodic(or requestAnimationFrame), finish flushing.\n                if (this._schedulerQueue.filter(task => !task.isPeriodic && !task.isRequestAnimationFrame)\n                    .length === 0) {\n                    break;\n                }\n                const current = this._schedulerQueue.shift();\n                lastCurrentTime = this._currentTickTime;\n                this._currentTickTime = current.endTime;\n                if (doTick) {\n                    // Update any secondary schedulers like Jasmine mock Date.\n                    doTick(this._currentTickTime - lastCurrentTime);\n                }\n                const retval = current.func.apply(global, current.args);\n                if (!retval) {\n                    // Uncaught exception in the current scheduled function. Stop processing the queue.\n                    break;\n                }\n            }\n            return this._currentTickTime - startTime;\n        }\n    }\n    class FakeAsyncTestZoneSpec {\n        static assertInZone() {\n            if (Zone.current.get('FakeAsyncTestZoneSpec') == null) {\n                throw new Error('The code should be running in the fakeAsync zone to call this function');\n            }\n        }\n        constructor(namePrefix, trackPendingRequestAnimationFrame = false, macroTaskOptions) {\n            this.trackPendingRequestAnimationFrame = trackPendingRequestAnimationFrame;\n            this.macroTaskOptions = macroTaskOptions;\n            this._scheduler = new Scheduler();\n            this._microtasks = [];\n            this._lastError = null;\n            this._uncaughtPromiseErrors = Promise[Zone.__symbol__('uncaughtPromiseErrors')];\n            this.pendingPeriodicTimers = [];\n            this.pendingTimers = [];\n            this.patchDateLocked = false;\n            this.properties = { 'FakeAsyncTestZoneSpec': this };\n            this.name = 'fakeAsyncTestZone for ' + namePrefix;\n            // in case user can't access the construction of FakeAsyncTestSpec\n            // user can also define macroTaskOptions by define a global variable.\n            if (!this.macroTaskOptions) {\n                this.macroTaskOptions = global[Zone.__symbol__('FakeAsyncTestMacroTask')];\n            }\n        }\n        _fnAndFlush(fn, completers) {\n            return (...args) => {\n                fn.apply(global, args);\n                if (this._lastError === null) { // Success\n                    if (completers.onSuccess != null) {\n                        completers.onSuccess.apply(global);\n                    }\n                    // Flush microtasks only on success.\n                    this.flushMicrotasks();\n                }\n                else { // Failure\n                    if (completers.onError != null) {\n                        completers.onError.apply(global);\n                    }\n                }\n                // Return true if there were no errors, false otherwise.\n                return this._lastError === null;\n            };\n        }\n        static _removeTimer(timers, id) {\n            let index = timers.indexOf(id);\n            if (index > -1) {\n                timers.splice(index, 1);\n            }\n        }\n        _dequeueTimer(id) {\n            return () => {\n                FakeAsyncTestZoneSpec._removeTimer(this.pendingTimers, id);\n            };\n        }\n        _requeuePeriodicTimer(fn, interval, args, id) {\n            return () => {\n                // Requeue the timer callback if it's not been canceled.\n                if (this.pendingPeriodicTimers.indexOf(id) !== -1) {\n                    this._scheduler.scheduleFunction(fn, interval, { args, isPeriodic: true, id, isRequeuePeriodic: true });\n                }\n            };\n        }\n        _dequeuePeriodicTimer(id) {\n            return () => {\n                FakeAsyncTestZoneSpec._removeTimer(this.pendingPeriodicTimers, id);\n            };\n        }\n        _setTimeout(fn, delay, args, isTimer = true) {\n            let removeTimerFn = this._dequeueTimer(Scheduler.nextId);\n            // Queue the callback and dequeue the timer on success and error.\n            let cb = this._fnAndFlush(fn, { onSuccess: removeTimerFn, onError: removeTimerFn });\n            let id = this._scheduler.scheduleFunction(cb, delay, { args, isRequestAnimationFrame: !isTimer });\n            if (isTimer) {\n                this.pendingTimers.push(id);\n            }\n            return id;\n        }\n        _clearTimeout(id) {\n            FakeAsyncTestZoneSpec._removeTimer(this.pendingTimers, id);\n            this._scheduler.removeScheduledFunctionWithId(id);\n        }\n        _setInterval(fn, interval, args) {\n            let id = Scheduler.nextId;\n            let completers = { onSuccess: null, onError: this._dequeuePeriodicTimer(id) };\n            let cb = this._fnAndFlush(fn, completers);\n            // Use the callback created above to requeue on success.\n            completers.onSuccess = this._requeuePeriodicTimer(cb, interval, args, id);\n            // Queue the callback and dequeue the periodic timer only on error.\n            this._scheduler.scheduleFunction(cb, interval, { args, isPeriodic: true });\n            this.pendingPeriodicTimers.push(id);\n            return id;\n        }\n        _clearInterval(id) {\n            FakeAsyncTestZoneSpec._removeTimer(this.pendingPeriodicTimers, id);\n            this._scheduler.removeScheduledFunctionWithId(id);\n        }\n        _resetLastErrorAndThrow() {\n            let error = this._lastError || this._uncaughtPromiseErrors[0];\n            this._uncaughtPromiseErrors.length = 0;\n            this._lastError = null;\n            throw error;\n        }\n        getCurrentTickTime() {\n            return this._scheduler.getCurrentTickTime();\n        }\n        getFakeSystemTime() {\n            return this._scheduler.getFakeSystemTime();\n        }\n        setFakeBaseSystemTime(realTime) {\n            this._scheduler.setFakeBaseSystemTime(realTime);\n        }\n        getRealSystemTime() {\n            return this._scheduler.getRealSystemTime();\n        }\n        static patchDate() {\n            if (!!global[Zone.__symbol__('disableDatePatching')]) {\n                // we don't want to patch global Date\n                // because in some case, global Date\n                // is already being patched, we need to provide\n                // an option to let user still use their\n                // own version of Date.\n                return;\n            }\n            if (global['Date'] === FakeDate) {\n                // already patched\n                return;\n            }\n            global['Date'] = FakeDate;\n            FakeDate.prototype = OriginalDate.prototype;\n            // try check and reset timers\n            // because jasmine.clock().install() may\n            // have replaced the global timer\n            FakeAsyncTestZoneSpec.checkTimerPatch();\n        }\n        static resetDate() {\n            if (global['Date'] === FakeDate) {\n                global['Date'] = OriginalDate;\n            }\n        }\n        static checkTimerPatch() {\n            if (global.setTimeout !== timers.setTimeout) {\n                global.setTimeout = timers.setTimeout;\n                global.clearTimeout = timers.clearTimeout;\n            }\n            if (global.setInterval !== timers.setInterval) {\n                global.setInterval = timers.setInterval;\n                global.clearInterval = timers.clearInterval;\n            }\n        }\n        lockDatePatch() {\n            this.patchDateLocked = true;\n            FakeAsyncTestZoneSpec.patchDate();\n        }\n        unlockDatePatch() {\n            this.patchDateLocked = false;\n            FakeAsyncTestZoneSpec.resetDate();\n        }\n        tickToNext(steps = 1, doTick, tickOptions = { processNewMacroTasksSynchronously: true }) {\n            if (steps <= 0) {\n                return;\n            }\n            FakeAsyncTestZoneSpec.assertInZone();\n            this.flushMicrotasks();\n            this._scheduler.tickToNext(steps, doTick, tickOptions);\n            if (this._lastError !== null) {\n                this._resetLastErrorAndThrow();\n            }\n        }\n        tick(millis = 0, doTick, tickOptions = { processNewMacroTasksSynchronously: true }) {\n            FakeAsyncTestZoneSpec.assertInZone();\n            this.flushMicrotasks();\n            this._scheduler.tick(millis, doTick, tickOptions);\n            if (this._lastError !== null) {\n                this._resetLastErrorAndThrow();\n            }\n        }\n        flushMicrotasks() {\n            FakeAsyncTestZoneSpec.assertInZone();\n            const flushErrors = () => {\n                if (this._lastError !== null || this._uncaughtPromiseErrors.length) {\n                    // If there is an error stop processing the microtask queue and rethrow the error.\n                    this._resetLastErrorAndThrow();\n                }\n            };\n            while (this._microtasks.length > 0) {\n                let microtask = this._microtasks.shift();\n                microtask.func.apply(microtask.target, microtask.args);\n            }\n            flushErrors();\n        }\n        flush(limit, flushPeriodic, doTick) {\n            FakeAsyncTestZoneSpec.assertInZone();\n            this.flushMicrotasks();\n            const elapsed = this._scheduler.flush(limit, flushPeriodic, doTick);\n            if (this._lastError !== null) {\n                this._resetLastErrorAndThrow();\n            }\n            return elapsed;\n        }\n        flushOnlyPendingTimers(doTick) {\n            FakeAsyncTestZoneSpec.assertInZone();\n            this.flushMicrotasks();\n            const elapsed = this._scheduler.flushOnlyPendingTimers(doTick);\n            if (this._lastError !== null) {\n                this._resetLastErrorAndThrow();\n            }\n            return elapsed;\n        }\n        removeAllTimers() {\n            FakeAsyncTestZoneSpec.assertInZone();\n            this._scheduler.removeAll();\n            this.pendingPeriodicTimers = [];\n            this.pendingTimers = [];\n        }\n        getTimerCount() {\n            return this._scheduler.getTimerCount() + this._microtasks.length;\n        }\n        onScheduleTask(delegate, current, target, task) {\n            switch (task.type) {\n                case 'microTask':\n                    let args = task.data && task.data.args;\n                    // should pass additional arguments to callback if have any\n                    // currently we know process.nextTick will have such additional\n                    // arguments\n                    let additionalArgs;\n                    if (args) {\n                        let callbackIndex = task.data.cbIdx;\n                        if (typeof args.length === 'number' && args.length > callbackIndex + 1) {\n                            additionalArgs = Array.prototype.slice.call(args, callbackIndex + 1);\n                        }\n                    }\n                    this._microtasks.push({\n                        func: task.invoke,\n                        args: additionalArgs,\n                        target: task.data && task.data.target\n                    });\n                    break;\n                case 'macroTask':\n                    switch (task.source) {\n                        case 'setTimeout':\n                            task.data['handleId'] = this._setTimeout(task.invoke, task.data['delay'], Array.prototype.slice.call(task.data['args'], 2));\n                            break;\n                        case 'setImmediate':\n                            task.data['handleId'] = this._setTimeout(task.invoke, 0, Array.prototype.slice.call(task.data['args'], 1));\n                            break;\n                        case 'setInterval':\n                            task.data['handleId'] = this._setInterval(task.invoke, task.data['delay'], Array.prototype.slice.call(task.data['args'], 2));\n                            break;\n                        case 'XMLHttpRequest.send':\n                            throw new Error('Cannot make XHRs from within a fake async test. Request URL: ' +\n                                task.data['url']);\n                        case 'requestAnimationFrame':\n                        case 'webkitRequestAnimationFrame':\n                        case 'mozRequestAnimationFrame':\n                            // Simulate a requestAnimationFrame by using a setTimeout with 16 ms.\n                            // (60 frames per second)\n                            task.data['handleId'] = this._setTimeout(task.invoke, 16, task.data['args'], this.trackPendingRequestAnimationFrame);\n                            break;\n                        default:\n                            // user can define which macroTask they want to support by passing\n                            // macroTaskOptions\n                            const macroTaskOption = this.findMacroTaskOption(task);\n                            if (macroTaskOption) {\n                                const args = task.data && task.data['args'];\n                                const delay = args && args.length > 1 ? args[1] : 0;\n                                let callbackArgs = macroTaskOption.callbackArgs ? macroTaskOption.callbackArgs : args;\n                                if (!!macroTaskOption.isPeriodic) {\n                                    // periodic macroTask, use setInterval to simulate\n                                    task.data['handleId'] = this._setInterval(task.invoke, delay, callbackArgs);\n                                    task.data.isPeriodic = true;\n                                }\n                                else {\n                                    // not periodic, use setTimeout to simulate\n                                    task.data['handleId'] = this._setTimeout(task.invoke, delay, callbackArgs);\n                                }\n                                break;\n                            }\n                            throw new Error('Unknown macroTask scheduled in fake async test: ' + task.source);\n                    }\n                    break;\n                case 'eventTask':\n                    task = delegate.scheduleTask(target, task);\n                    break;\n            }\n            return task;\n        }\n        onCancelTask(delegate, current, target, task) {\n            switch (task.source) {\n                case 'setTimeout':\n                case 'requestAnimationFrame':\n                case 'webkitRequestAnimationFrame':\n                case 'mozRequestAnimationFrame':\n                    return this._clearTimeout(task.data['handleId']);\n                case 'setInterval':\n                    return this._clearInterval(task.data['handleId']);\n                default:\n                    // user can define which macroTask they want to support by passing\n                    // macroTaskOptions\n                    const macroTaskOption = this.findMacroTaskOption(task);\n                    if (macroTaskOption) {\n                        const handleId = task.data['handleId'];\n                        return macroTaskOption.isPeriodic ? this._clearInterval(handleId) :\n                            this._clearTimeout(handleId);\n                    }\n                    return delegate.cancelTask(target, task);\n            }\n        }\n        onInvoke(delegate, current, target, callback, applyThis, applyArgs, source) {\n            try {\n                FakeAsyncTestZoneSpec.patchDate();\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                if (!this.patchDateLocked) {\n                    FakeAsyncTestZoneSpec.resetDate();\n                }\n            }\n        }\n        findMacroTaskOption(task) {\n            if (!this.macroTaskOptions) {\n                return null;\n            }\n            for (let i = 0; i < this.macroTaskOptions.length; i++) {\n                const macroTaskOption = this.macroTaskOptions[i];\n                if (macroTaskOption.source === task.source) {\n                    return macroTaskOption;\n                }\n            }\n            return null;\n        }\n        onHandleError(parentZoneDelegate, currentZone, targetZone, error) {\n            this._lastError = error;\n            return false; // Don't propagate error to parent zone.\n        }\n    }\n    // Export the class so that new instances can be created with proper\n    // constructor params.\n    Zone['FakeAsyncTestZoneSpec'] = FakeAsyncTestZoneSpec;\n})(typeof window === 'object' && window || typeof self === 'object' && self || global);\nZone.__load_patch('fakeasync', (global, Zone, api) => {\n    const FakeAsyncTestZoneSpec = Zone && Zone['FakeAsyncTestZoneSpec'];\n    function getProxyZoneSpec() {\n        return Zone && Zone['ProxyZoneSpec'];\n    }\n    let _fakeAsyncTestZoneSpec = null;\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @experimental\n     */\n    function resetFakeAsyncZone() {\n        if (_fakeAsyncTestZoneSpec) {\n            _fakeAsyncTestZoneSpec.unlockDatePatch();\n        }\n        _fakeAsyncTestZoneSpec = null;\n        // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n        getProxyZoneSpec() && getProxyZoneSpec().assertPresent().resetDelegate();\n    }\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * ## Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @experimental\n     */\n    function fakeAsync(fn) {\n        // Not using an arrow function to preserve context passed from call site\n        const fakeAsyncFn = function (...args) {\n            const ProxyZoneSpec = getProxyZoneSpec();\n            if (!ProxyZoneSpec) {\n                throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n                    'Please make sure that your environment includes zone.js/plugins/proxy');\n            }\n            const proxyZoneSpec = ProxyZoneSpec.assertPresent();\n            if (Zone.current.get('FakeAsyncTestZoneSpec')) {\n                throw new Error('fakeAsync() calls can not be nested');\n            }\n            try {\n                // in case jasmine.clock init a fakeAsyncTestZoneSpec\n                if (!_fakeAsyncTestZoneSpec) {\n                    if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                        throw new Error('fakeAsync() calls can not be nested');\n                    }\n                    _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n                }\n                let res;\n                const lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n                proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n                _fakeAsyncTestZoneSpec.lockDatePatch();\n                try {\n                    res = fn.apply(this, args);\n                    flushMicrotasks();\n                }\n                finally {\n                    proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n                }\n                if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                    throw new Error(`${_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length} ` +\n                        `periodic timer(s) still in the queue.`);\n                }\n                if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                    throw new Error(`${_fakeAsyncTestZoneSpec.pendingTimers.length} timer(s) still in the queue.`);\n                }\n                return res;\n            }\n            finally {\n                resetFakeAsyncZone();\n            }\n        };\n        fakeAsyncFn.isFakeAsync = true;\n        return fakeAsyncFn;\n    }\n    function _getFakeAsyncZoneSpec() {\n        if (_fakeAsyncTestZoneSpec == null) {\n            _fakeAsyncTestZoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n            if (_fakeAsyncTestZoneSpec == null) {\n                throw new Error('The code should be running in the fakeAsync zone to call this function');\n            }\n        }\n        return _fakeAsyncTestZoneSpec;\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * ## Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @experimental\n     */\n    function tick(millis = 0, ignoreNestedTimeout = false) {\n        _getFakeAsyncZoneSpec().tick(millis, null, ignoreNestedTimeout);\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @experimental\n     */\n    function flush(maxTurns) {\n        return _getFakeAsyncZoneSpec().flush(maxTurns);\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @experimental\n     */\n    function discardPeriodicTasks() {\n        const zoneSpec = _getFakeAsyncZoneSpec();\n        zoneSpec.pendingPeriodicTimers;\n        zoneSpec.pendingPeriodicTimers.length = 0;\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @experimental\n     */\n    function flushMicrotasks() {\n        _getFakeAsyncZoneSpec().flushMicrotasks();\n    }\n    Zone[api.symbol('fakeAsyncTest')] =\n        { resetFakeAsyncZone, flushMicrotasks, discardPeriodicTasks, tick, flush, fakeAsync };\n}, true);\n\n/**\n * Promise for async/fakeAsync zoneSpec test\n * can support async operation which not supported by zone.js\n * such as\n * it ('test jsonp in AsyncZone', async() => {\n *   new Promise(res => {\n *     jsonp(url, (data) => {\n *       // success callback\n *       res(data);\n *     });\n *   }).then((jsonpResult) => {\n *     // get jsonp result.\n *\n *     // user will expect AsyncZoneSpec wait for\n *     // then, but because jsonp is not zone aware\n *     // AsyncZone will finish before then is called.\n *   });\n * });\n */\nZone.__load_patch('promisefortest', (global, Zone, api) => {\n    const symbolState = api.symbol('state');\n    const UNRESOLVED = null;\n    const symbolParentUnresolved = api.symbol('parentUnresolved');\n    // patch Promise.prototype.then to keep an internal\n    // number for tracking unresolved chained promise\n    // we will decrease this number when the parent promise\n    // being resolved/rejected and chained promise was\n    // scheduled as a microTask.\n    // so we can know such kind of chained promise still\n    // not resolved in AsyncTestZone\n    Promise[api.symbol('patchPromiseForTest')] = function patchPromiseForTest() {\n        let oriThen = Promise[Zone.__symbol__('ZonePromiseThen')];\n        if (oriThen) {\n            return;\n        }\n        oriThen = Promise[Zone.__symbol__('ZonePromiseThen')] = Promise.prototype.then;\n        Promise.prototype.then = function () {\n            const chained = oriThen.apply(this, arguments);\n            if (this[symbolState] === UNRESOLVED) {\n                // parent promise is unresolved.\n                const asyncTestZoneSpec = Zone.current.get('AsyncTestZoneSpec');\n                if (asyncTestZoneSpec) {\n                    asyncTestZoneSpec.unresolvedChainedPromiseCount++;\n                    chained[symbolParentUnresolved] = true;\n                }\n            }\n            return chained;\n        };\n    };\n    Promise[api.symbol('unPatchPromiseForTest')] = function unpatchPromiseForTest() {\n        // restore origin then\n        const oriThen = Promise[Zone.__symbol__('ZonePromiseThen')];\n        if (oriThen) {\n            Promise.prototype.then = oriThen;\n            Promise[Zone.__symbol__('ZonePromiseThen')] = undefined;\n        }\n    };\n});\n"],"mappings":"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","names":["global","error","Zone","self","delegate","prop","ObjectGetOwnPropertyDescriptor","ObjectDefineProperty","creationTrace","value","_global","event","patchOptions","returnTarget","internalWindow","window","isBrowser","isMix","zoneSymbolEventNames","TRUE_STR","FALSE_STR","ZONE_SYMBOL_PREFIX","name","loadTasks","error","global","Zone","SyncTestZoneSpec","ProxyZoneSpec","isNode","originalClockFn","proxyZoneSpec","self","_global","current","timers","args"],"x_google_ignoreList":[0,1]}