{
  "version": 3,
  "sources": ["src/app/services/example-test.service.ts", "src/app/services/specs/example-test.service.spec.ts"],
  "sourcesContent": ["import { Observable, of } from \"rxjs\";\nimport { ToDoListSignalsService } from \"./to-do-list-signals.service\";\nimport { Injectable } from \"@angular/core\";\nimport { to_do_model } from \"../models/model/to_do_model\";\nimport { TodoKeyLocalStorage } from \"../models/enum/toDoKeyLocalStorage\";\n\n@Injectable({ providedIn: \"root\" })\nexport class ExampleTestService {\n  public testNamesList: Array<{ id: number; name: string }> = [\n    { id: 1, name: \"test1\" },\n    { id: 2, name: \"test2\" },\n  ];\n\n  constructor(private toDoListSignalsService: ToDoListSignalsService) {}\n\n  public getTestNamesList(): Observable<Array<{ id: number; name: string }>> {\n    return of(this.testNamesList);\n  }\n\n  public handleCreateTodo(todo: to_do_model): Observable<Array<to_do_model>> {\n    if (todo) {\n      this.toDoListSignalsService.createUpdateToDo(todo);\n    }\n    return of(this.toDoListSignalsService.toDoState());\n  }\n}\n", "import { TestBed } from \"@angular/core/testing\";\nimport { ExampleTestService } from \"../example-test.service\";\nimport { ToDoListSignalsService } from \"../to-do-list-signals.service\";\nimport { to_do_model } from \"src/app/models/model/to_do_model\";\n\ndescribe(\"ExampleTestService\", () => {\n  let service: ExampleTestService;\n  let todoService: ToDoListSignalsService;\n\n  beforeEach(() => {\n    service = TestBed.inject(ExampleTestService);\n    todoService = TestBed.inject(ToDoListSignalsService);\n  });\n\n  //Metuodo que retorna um array de dados\n  it(\"should return correct list\", () => {\n    service.getTestNamesList().subscribe({\n      next: (list) => {\n        expect(list).toEqual([\n          { id: 1, name: \"test1\" },\n          { id: 2, name: \"test2\" },\n        ]);\n      },\n    });\n  });\n\n  //\n  it(\"should return correctl todo list\", () => {\n    jest.spyOn(todoService, \"createUpdateToDo\");\n\n    const newTodo: to_do_model = {\n      id: 1,\n      title: \"new todo\",\n      description: \"Description for test\",\n      done: true,\n    };\n\n    service.handleCreateTodo(newTodo).subscribe({\n      next: (todoList) => {\n        expect(todoList).toEqual([newTodo]);\n        expect(todoService.createUpdateToDo).toHaveBeenCalledWith(newTodo);\n      },\n    });\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;AAOA,IAAa,sBAAb,WAA+B;EAM7B,YAAoB,wBAA8C;AAA9C,SAAA,yBAAA;AALb,SAAA,gBAAqD;MAC1D,EAAE,IAAI,GAAG,MAAM,QAAO;MACtB,EAAE,IAAI,GAAG,MAAM,QAAO;;EAG6C;EAE9D,mBAAgB;AACrB,WAAO,GAAG,KAAK,aAAa;EAC9B;EAEO,iBAAiB,MAAiB;AACvC,QAAI,MAAM;AACR,WAAK,uBAAuB,iBAAiB,IAAI;;AAEnD,WAAO,GAAG,KAAK,uBAAuB,UAAS,CAAE;EACnD;;;GAjBF;AAAa,qBAAkB,WAAA;EAD9B,WAAW,EAAE,YAAY,OAAM,CAAE;GACrB,kBAAkB;;;ACF/B,SAAS,sBAAsB,MAAK;AAClC,MAAI;AACJ,MAAI;AAEJ,aAAW,MAAK;AACd,cAAU,QAAQ,OAAO,kBAAkB;AAC3C,kBAAc,QAAQ,OAAO,sBAAsB;EACrD,CAAC;AAGD,KAAG,8BAA8B,MAAK;AACpC,YAAQ,iBAAgB,EAAG,UAAU;MACnC,MAAM,CAAC,SAAQ;AACb,eAAO,IAAI,EAAE,QAAQ;UACnB,EAAE,IAAI,GAAG,MAAM,QAAO;UACtB,EAAE,IAAI,GAAG,MAAM,QAAO;SACvB;MACH;KACD;EACH,CAAC;AAGD,KAAG,oCAAoC,MAAK;AAC1C,SAAK,MAAM,aAAa,kBAAkB;AAE1C,UAAM,UAAuB;MAC3B,IAAI;MACJ,OAAO;MACP,aAAa;MACb,MAAM;;AAGR,YAAQ,iBAAiB,OAAO,EAAE,UAAU;MAC1C,MAAM,CAAC,aAAY;AACjB,eAAO,QAAQ,EAAE,QAAQ,CAAC,OAAO,CAAC;AAClC,eAAO,YAAY,gBAAgB,EAAE,qBAAqB,OAAO;MACnE;KACD;EACH,CAAC;AACH,CAAC;",
  "names": []
}
