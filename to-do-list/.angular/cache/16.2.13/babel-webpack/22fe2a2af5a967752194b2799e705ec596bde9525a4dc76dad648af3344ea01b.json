{"ast":null,"code":"import { ToDoListSignalsService } from \"./../../services/to-do-list-signals.service\";\nimport { inject } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/input\";\nclass ToDoFormComponent {\n  constructor() {\n    this.toDoListSignalsService = inject(ToDoListSignalsService);\n    this.allToDo = this.toDoListSignalsService.toDoState();\n    this.dialogService = inject(MatDialogRef);\n    this.dataModalCard = inject(MAT_DIALOG_DATA);\n  }\n  ngOnInit() {\n    this.carregarForm();\n    if (this.dataModalCard) {\n      this.setValueForm(this.dataModalCard);\n    }\n  }\n  carregarForm() {\n    this.to_do_form = new FormGroup({\n      title: new FormControl(\"\", [Validators.required, Validators.minLength(3)]),\n      description: new FormControl(\"\", [Validators.required, Validators.minLength(5)])\n    });\n  }\n  setValueForm(data) {\n    this.to_do_form.setValue({\n      title: data.title,\n      description: data.description\n    });\n  }\n  handleSubmitForm() {\n    if (this.to_do_form.valid && this.to_do_form.value) {\n      const params = {\n        title: String(this.to_do_form.controls[\"title\"].value),\n        description: String(this.to_do_form.controls[\"description\"].value),\n        id: this.allToDo.length > 0 ? this.allToDo.length + 1 : 1,\n        done: false\n      };\n      console.log(params);\n      this.toDoListSignalsService.createUpdateToDo(params);\n      this.handleCloseModal();\n    }\n  }\n  handleUpdateDataForm() {}\n  handleCloseModal() {\n    this.dialogService.close();\n  }\n  static #_ = this.ɵfac = function ToDoFormComponent_Factory(t) {\n    return new (t || ToDoFormComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ToDoFormComponent,\n    selectors: [[\"app-to-do-form\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 18,\n    vars: 2,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"todo_form_card\"], [1, \"todo_form_title\"], [\"color\", \"primary\", \"appearance\", \"outline\", 1, \"todo_form_input\"], [\"matInput\", \"\", \"formControlName\", \"title\", \"placeholder\", \"nome\"], [\"matInput\", \"\", \"formControlName\", \"description\", \"placeholder\", \"description\"], [1, \"todo_form_actions\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", 1, \"todo_form_sucess_btn\", 3, \"disabled\"], [1, \"txt__btn_success\"], [\"mat-raised-button\", \"\", \"type\", \"button\", \"color\", \"warn\", 3, \"click\"]],\n    template: function ToDoFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function ToDoFormComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.handleSubmitForm();\n        });\n        i0.ɵɵelementStart(1, \"section\", 1)(2, \"h1\", 2);\n        i0.ɵɵtext(3, \"Adicionar tarefa\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-form-field\", 3)(5, \"mat-label\");\n        i0.ɵɵtext(6, \"Nome\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-form-field\", 3)(9, \"mat-label\");\n        i0.ɵɵtext(10, \"Descri\\u00E7\\u00E3o\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"textarea\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 6)(13, \"button\", 7)(14, \"span\", 8);\n        i0.ɵɵtext(15, \"Adicionar\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function ToDoFormComponent_Template_button_click_16_listener() {\n          return ctx.handleCloseModal();\n        });\n        i0.ɵɵtext(17, \" Cancelar \");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.to_do_form);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"disabled\", !ctx.to_do_form.valid);\n      }\n    },\n    dependencies: [CommonModule, FormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, ReactiveFormsModule, i1.FormGroupDirective, i1.FormControlName, MatButtonModule, i2.MatButton, MatCardModule, MatFormFieldModule, i3.MatFormField, i3.MatLabel, MatInputModule, i4.MatInput],\n    encapsulation: 2\n  });\n}\nexport { ToDoFormComponent };","map":{"version":3,"names":["ToDoListSignalsService","inject","CommonModule","FormControl","FormGroup","FormsModule","ReactiveFormsModule","Validators","MatButtonModule","MatCardModule","MatFormFieldModule","MatInputModule","MAT_DIALOG_DATA","MatDialogRef","ToDoFormComponent","constructor","toDoListSignalsService","allToDo","toDoState","dialogService","dataModalCard","ngOnInit","carregarForm","setValueForm","to_do_form","title","required","minLength","description","data","setValue","handleSubmitForm","valid","value","params","String","controls","id","length","done","console","log","createUpdateToDo","handleCloseModal","handleUpdateDataForm","close","_","_2","selectors","standalone","features","i0","ɵɵStandaloneFeature","decls","vars","consts","template","ToDoFormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ToDoFormComponent_Template_form_ngSubmit_0_listener","ɵɵtext","ɵɵelementEnd","ɵɵelement","ToDoFormComponent_Template_button_click_16_listener","ɵɵproperty","ɵɵadvance","i1","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","i2","MatButton","i3","MatFormField","MatLabel","i4","MatInput","encapsulation"],"sources":["/Users/viniciussantos/Documents/projetos/Front/udemy/to-do-list/to-do-list/to-do-list/src/app/components/to-do-form/to-do-form.component.ts","/Users/viniciussantos/Documents/projetos/Front/udemy/to-do-list/to-do-list/to-do-list/src/app/components/to-do-form/to-do-form.component.html"],"sourcesContent":["import { ToDoListSignalsService } from \"./../../services/to-do-list-signals.service\";\nimport { Component, OnInit, inject } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from \"@angular/forms\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\nimport { HeaderComponent } from \"../header/header.component\";\n\n@Component({\n  selector: \"app-to-do-form\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  templateUrl: \"./to-do-form.component.html\",\n  styleUrls: [],\n})\nexport class ToDoFormComponent implements OnInit {\n  public to_do_form!: FormGroup;\n  public toDoListSignalsService = inject(ToDoListSignalsService);\n  public allToDo = this.toDoListSignalsService.toDoState();\n  public dialogService = inject(MatDialogRef<HeaderComponent>);\n  public dataModalCard = inject(MAT_DIALOG_DATA);\n  ngOnInit(): void {\n    this.carregarForm();\n    if (this.dataModalCard) {\n      this.setValueForm(this.dataModalCard);\n    }\n  }\n\n  public carregarForm(): void {\n    this.to_do_form = new FormGroup({\n      title: new FormControl(\"\", [\n        Validators.required,\n        Validators.minLength(3),\n      ]),\n      description: new FormControl(\"\", [\n        Validators.required,\n        Validators.minLength(5),\n      ]),\n    });\n  }\n\n  public setValueForm(data: any): void {\n    this.to_do_form.setValue({\n      title: data.title,\n      description: data.description,\n    });\n  }\n\n  public handleSubmitForm(): void {\n    if (this.to_do_form.valid && this.to_do_form.value) {\n      const params = {\n        title: String(this.to_do_form.controls[\"title\"].value),\n        description: String(this.to_do_form.controls[\"description\"].value),\n        id: this.allToDo.length > 0 ? this.allToDo.length + 1 : 1,\n        done: false,\n      };\n\n      console.log(params);\n      this.toDoListSignalsService.createUpdateToDo(params);\n      this.handleCloseModal();\n    }\n  }\n\n  public handleUpdateDataForm(): void {}\n\n  public handleCloseModal(): void {\n    this.dialogService.close();\n  }\n}\n","<form [formGroup]=\"to_do_form\" (ngSubmit)=\"handleSubmitForm()\">\n  <section class=\"todo_form_card\">\n    <h1 class=\"todo_form_title\">Adicionar tarefa</h1>\n\n    <mat-form-field\n      color=\"primary\"\n      appearance=\"outline\"\n      class=\"todo_form_input\"\n    >\n      <mat-label>Nome</mat-label>\n      <input matInput formControlName=\"title\" placeholder=\"nome\" />\n    </mat-form-field>\n\n    <mat-form-field\n      color=\"primary\"\n      appearance=\"outline\"\n      class=\"todo_form_input\"\n    >\n      <mat-label>Descrição</mat-label>\n      <textarea\n        matInput\n        formControlName=\"description\"\n        placeholder=\"description\"\n      ></textarea>\n    </mat-form-field>\n\n    <div class=\"todo_form_actions\">\n      <button\n        mat-raised-button\n        class=\"todo_form_sucess_btn\"\n        [disabled]=\"!to_do_form.valid\"\n        type=\"submit\"\n      >\n        <span class=\"txt__btn_success\">Adicionar</span>\n      </button>\n\n      <button\n        mat-raised-button\n        type=\"button\"\n        (click)=\"handleCloseModal()\"\n        color=\"warn\"\n      >\n        Cancelar\n      </button>\n    </div>\n  </section>\n</form>\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,6CAA6C;AACpF,SAA4BC,MAAM,QAAQ,eAAe;AACzD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SACEC,WAAW,EACXC,SAAS,EACTC,WAAW,EACXC,mBAAmB,EACnBC,UAAU,QACL,gBAAgB;AACvB,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,eAAe,EAAEC,YAAY,QAAQ,0BAA0B;;;;;;AAGxE,MAeaC,iBAAiB;EAf9BC,YAAA;IAiBS,KAAAC,sBAAsB,GAAGf,MAAM,CAACD,sBAAsB,CAAC;IACvD,KAAAiB,OAAO,GAAG,IAAI,CAACD,sBAAsB,CAACE,SAAS,EAAE;IACjD,KAAAC,aAAa,GAAGlB,MAAM,CAACY,YAA6B,CAAC;IACrD,KAAAO,aAAa,GAAGnB,MAAM,CAACW,eAAe,CAAC;;EAC9CS,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,EAAE;IACnB,IAAI,IAAI,CAACF,aAAa,EAAE;MACtB,IAAI,CAACG,YAAY,CAAC,IAAI,CAACH,aAAa,CAAC;;EAEzC;EAEOE,YAAYA,CAAA;IACjB,IAAI,CAACE,UAAU,GAAG,IAAIpB,SAAS,CAAC;MAC9BqB,KAAK,EAAE,IAAItB,WAAW,CAAC,EAAE,EAAE,CACzBI,UAAU,CAACmB,QAAQ,EACnBnB,UAAU,CAACoB,SAAS,CAAC,CAAC,CAAC,CACxB,CAAC;MACFC,WAAW,EAAE,IAAIzB,WAAW,CAAC,EAAE,EAAE,CAC/BI,UAAU,CAACmB,QAAQ,EACnBnB,UAAU,CAACoB,SAAS,CAAC,CAAC,CAAC,CACxB;KACF,CAAC;EACJ;EAEOJ,YAAYA,CAACM,IAAS;IAC3B,IAAI,CAACL,UAAU,CAACM,QAAQ,CAAC;MACvBL,KAAK,EAAEI,IAAI,CAACJ,KAAK;MACjBG,WAAW,EAAEC,IAAI,CAACD;KACnB,CAAC;EACJ;EAEOG,gBAAgBA,CAAA;IACrB,IAAI,IAAI,CAACP,UAAU,CAACQ,KAAK,IAAI,IAAI,CAACR,UAAU,CAACS,KAAK,EAAE;MAClD,MAAMC,MAAM,GAAG;QACbT,KAAK,EAAEU,MAAM,CAAC,IAAI,CAACX,UAAU,CAACY,QAAQ,CAAC,OAAO,CAAC,CAACH,KAAK,CAAC;QACtDL,WAAW,EAAEO,MAAM,CAAC,IAAI,CAACX,UAAU,CAACY,QAAQ,CAAC,aAAa,CAAC,CAACH,KAAK,CAAC;QAClEI,EAAE,EAAE,IAAI,CAACpB,OAAO,CAACqB,MAAM,GAAG,CAAC,GAAG,IAAI,CAACrB,OAAO,CAACqB,MAAM,GAAG,CAAC,GAAG,CAAC;QACzDC,IAAI,EAAE;OACP;MAEDC,OAAO,CAACC,GAAG,CAACP,MAAM,CAAC;MACnB,IAAI,CAAClB,sBAAsB,CAAC0B,gBAAgB,CAACR,MAAM,CAAC;MACpD,IAAI,CAACS,gBAAgB,EAAE;;EAE3B;EAEOC,oBAAoBA,CAAA,GAAU;EAE9BD,gBAAgBA,CAAA;IACrB,IAAI,CAACxB,aAAa,CAAC0B,KAAK,EAAE;EAC5B;EAAC,QAAAC,CAAA,G;qBApDUhC,iBAAiB;EAAA;EAAA,QAAAiC,EAAA,G;UAAjBjC,iBAAiB;IAAAkC,SAAA;IAAAC,UAAA;IAAAC,QAAA,GAAAC,EAAA,CAAAC,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QChC9BP,EAAA,CAAAS,cAAA,cAA+D;QAAhCT,EAAA,CAAAU,UAAA,sBAAAC,oDAAA;UAAA,OAAYH,GAAA,CAAA5B,gBAAA,EAAkB;QAAA,EAAC;QAC5DoB,EAAA,CAAAS,cAAA,iBAAgC;QACFT,EAAA,CAAAY,MAAA,uBAAgB;QAAAZ,EAAA,CAAAa,YAAA,EAAK;QAEjDb,EAAA,CAAAS,cAAA,wBAIC;QACYT,EAAA,CAAAY,MAAA,WAAI;QAAAZ,EAAA,CAAAa,YAAA,EAAY;QAC3Bb,EAAA,CAAAc,SAAA,eAA6D;QAC/Dd,EAAA,CAAAa,YAAA,EAAiB;QAEjBb,EAAA,CAAAS,cAAA,wBAIC;QACYT,EAAA,CAAAY,MAAA,2BAAS;QAAAZ,EAAA,CAAAa,YAAA,EAAY;QAChCb,EAAA,CAAAc,SAAA,mBAIY;QACdd,EAAA,CAAAa,YAAA,EAAiB;QAEjBb,EAAA,CAAAS,cAAA,cAA+B;QAOIT,EAAA,CAAAY,MAAA,iBAAS;QAAAZ,EAAA,CAAAa,YAAA,EAAO;QAGjDb,EAAA,CAAAS,cAAA,iBAKC;QAFCT,EAAA,CAAAU,UAAA,mBAAAK,oDAAA;UAAA,OAASP,GAAA,CAAAhB,gBAAA,EAAkB;QAAA,EAAC;QAG5BQ,EAAA,CAAAY,MAAA,kBACF;QAAAZ,EAAA,CAAAa,YAAA,EAAS;;;QA3CTb,EAAA,CAAAgB,UAAA,cAAAR,GAAA,CAAAnC,UAAA,CAAwB;QA8BtB2B,EAAA,CAAAiB,SAAA,IAA8B;QAA9BjB,EAAA,CAAAgB,UAAA,cAAAR,GAAA,CAAAnC,UAAA,CAAAQ,KAAA,CAA8B;;;mBDTlC9B,YAAY,EACZG,WAAW,EAAAgE,EAAA,CAAAC,aAAA,EAAAD,EAAA,CAAAE,oBAAA,EAAAF,EAAA,CAAAG,eAAA,EAAAH,EAAA,CAAAI,oBAAA,EACXnE,mBAAmB,EAAA+D,EAAA,CAAAK,kBAAA,EAAAL,EAAA,CAAAM,eAAA,EACnBnE,eAAe,EAAAoE,EAAA,CAAAC,SAAA,EACfpE,aAAa,EACbC,kBAAkB,EAAAoE,EAAA,CAAAC,YAAA,EAAAD,EAAA,CAAAE,QAAA,EAClBrE,cAAc,EAAAsE,EAAA,CAAAC,QAAA;IAAAC,aAAA;EAAA;;SAKLrE,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}